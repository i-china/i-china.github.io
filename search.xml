<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019年]]></title>
    <url>%2F2019%2F08%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[At 2019 我的野心，以及和挚友的约定！]]></content>
      <categories>
        <category>Life</category>
        <category>Year</category>
        <category>Month</category>
        <category>Day</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NoSQL]]></title>
    <url>%2F2019%2F08%2F11%2FNoSQL-Note%2F</url>
    <content type="text"><![CDATA[NoSQL TODO ListRedis Memcached]]></content>
      <categories>
        <category>NoSQL</category>
        <category>Redis</category>
        <category>Memcached</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL]]></title>
    <url>%2F2019%2F08%2F11%2FMySQL-Note%2F</url>
    <content type="text"><![CDATA[MySQL TODO LIST基本语法常见用法集群缓存主从复制双主热备分库分表分布式架构]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2F2019%2F08%2F11%2FHexo-Note%2F</url>
    <content type="text"><![CDATA[Hexo 基础和语法 npm install -g hexo-clihexo init &lt;Folder&gt;npm installvim package.jsonhexo new [layout] &lt;title&gt;hexo generate = hexo ghexo publish [layout] &lt;filename&gt;hexo server -p xxxx -s --static -l --loghexo deploy = hexo dhexo render &lt;file1&gt; [file2] ... -o --outputhexo migratehexo clean = hexo chexo list &lt;type&gt;hexo versionhexo --safehexo --debughexo --silenthexo --config custom.ymlhexo --drafthexo --cwd /path/to/cwd npm install hexo-migrator-rss --savehexo migrate rss &lt;source&gt;npm install hexo-migrator-wordpress --savehexo migrate wordpress &lt;source&gt; Writehexo new [layout] &lt;title&gt;layout: post &gt; source/_posts page &gt; source draft &gt; source/_draftshexo new photo &quot;TEXT&quot; Front-Matter1234567891011121314151617181920212223242526272829title: TEXTdate: DATEupdated: UPDATE_TIMEcomments: truetags: TEXTcategories: TEXTpermalink: urlkeywords: TEXTcopyright: true Tag Plugins引用块&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125; content &#123;% endblockquote %&#125; 代码块&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 反引号代码块&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; SERVERnpm install hexo-server --savehexo server -p 5000hexo server -shexo server -i 192.168.1.1 MADE FILEShexo generatehexo generate --watchhexo generate --deployhexo deploy --generatehexo g -dhexo d -g DEPLOYnpm install hexo-deploy-git --savehexo deploydeploy: type: git repo: &lt;repository url&gt; branch: [branch_name] message: [message] SFTPnpm install hexo-deployed0-sftp --savevim _config.yml deploy: type: sftp host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remotePath: [remote path] port: [port] privateKey: [path/to/privateKey] passphrase: [passphrase] agent: [path/to/agent/socket] PERMALINKSvim _config.yml permalink_defaults: lang: en|zh-Hans THEMEgit clone git@github.com/&lt;username&gt;/xxx.git theme/xxx cd xxx npm install TEMPLATEindex 首页 post 文章 page 分页 archive 归档 category 分类 tag 标签 具体看官方APIHEXO-DOC]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript]]></title>
    <url>%2F2019%2F08%2F11%2FJavaScript-Note%2F</url>
    <content type="text"><![CDATA[JavaScript]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JQuery</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx]]></title>
    <url>%2F2019%2F08%2F11%2FNginx-Note%2F</url>
    <content type="text"><![CDATA[iFaithFreedom TODO LIST基本语法常见用法虚拟主机反向代理缓存负载均衡 配置文件由指令与指令块构成Nginx_DOC每条指令以 ； 分号结尾，指令与参数间以空格符号分隔指令块以 {} 大括号将多条指令组织在一起include 语句允许组合多个配置文件以提升可维护性使用# 符号添加注释，提高可读性使用 $ 符号使用变量部分指令的参数支持正则表达式配置参数： 时间的单位s: seconds m: minutes h:hours d:days w:weeks M:months,30 days y:years,365 days 空间的单位bytes k/K: kilobytes m/M: megabytes g/G: gigabyteseg: &#123;12345678910111213141516 include mime.types; upstream xxx &#123; server 127.0.0.1:8000; &#125;&#125;server &#123; listen 443 http2; # Nginx Config syntax limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s; location ~* \.(gif|jpg|jpeg)$ &#123; proxy_cache my_cache; expires 3m;proxy_cache_key $host$uri$is_args$args; proxy_cache_valid 200 304 302 1d; proxy_pass http://xxx.xxx; &#125;&#125; 重载，热部署，日志切割Nginx 命令行：格式： nginx -s reload帮助： -？ -h使用指定的配置文件： -c指定配置指令： -g指定运行目录： -p发送信号： -s ： 立刻停止服务： stop 优雅的停止：quit 重载配置文件： reload 重新开始记录日志文件 reopen测试配置文件是否有语法错误： -t -T打印nginx的版本信息、编译信息等： -v -V 重载： nginx -s reload热部署：nginx 版本升级， 编译安装， kill -USR2 nginxID(ps -ef | grep nginx), kill -WINCH ID(进程号)日志切割：xxx.lg(日志文件) nginx -s reopen Nginx 配置静态资源Web服务器http { include mime.types; #default_type application/octet-stream; log_format main ‘$remote_addr - $remote_user [$time_local] “$request” ‘ ‘$status $body_bytes_sent “$http_referer” ‘ ‘“$http_user_agent” “$http_x_forwarded_for”‘; client_max_body_size 60M; proxy_cache_path /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; gzip_min_lengt 1; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; } server { listen 8080; server_name hale.dev; access_log logs/hale.dev.log main; location / { alias dirpath/; #autoindex on; # 开启目录浏览功能 #set $limit_rate 1k; # 限制访问速度 每秒传输1kb #index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; } nginx -s reloadNginx 搭建缓存功能的反向代理服务openresty实现反向代理 include vhost/****.conf;upstream local { server 127.0.0.1:8080;} server { server_name hale.dev; listen 80; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_cache my_cache; #proxy_cache_key $host$uri$is_args$args; #proxy_cache_valid 200 304 302 1d; proxy_pass http://local; }} 此处的配置详情可以在Nginx官网 ngx__http__proxy_module 中获取GoAccess实现可视化并实时监控access日志]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown]]></title>
    <url>%2F2019%2F08%2F11%2FMarkDown-Note%2F</url>
    <content type="text"><![CDATA[MarkDown 基础、语法 斜体、粗体 *斜体* _斜体 _ **粗体** *** 加粗斜体 *** ~~ 删除线 ~~ 分级标题 # ## ## ### #### ##### ###### 超链接 TEXT[Your Message](https://i-china.github.io/) TExt[Your Text][https://i-china.win/ &quot;message&quot;] 锚点 Goto[Redirect](#TEXT) 列表 无序列表 * + - 有序列表 1. Text 2. Text 3. Text ... 代码缩进 * TEXT // * 后三空格 列表引用 &gt; TEXT &gt; TEXT 引用 列表嵌套 &gt;&gt;&gt; TEXT &gt;&gt; TEXT &gt; TEXT 其他要素 &gt; T1 &gt; T2 &gt; T3 &gt; T4 ... 插入图片 TEXT:![TEXT](URL &quot;TEXT&quot;) 内容目录 [TOC] 注脚 TEXT[^1] TEXT[^2] TEXT[^flag] [^1]: TEXT Comment [^2]: TEXT Comment [^flag]: TEXT FOR flag 公式$ 表示行内公式 $E=mc^2$$$ 整行公式 $$\sum_{i=1}^n a_i=0$$ 流程图st=&gt; start: START:&gt;url e=&gt;end: TEXT:&gt;url op1=&gt;operation: text|past // 有些复杂，不经常用，先不写了 表格居左：:---- 居中：:----:或者 ----- 居右：:----:TEXT|TEXT|TEXT-|-|-|TEXT|TEXT|TEXTTEXT|TEXT|TEXT-----------TEXT|TEXT-|-:TEXT TEXT | TEXT/TEXT 分割线* * *********- - ---------- 代码CODE()``` #include&lt;stdio.h&gt; ``` 换行行后 加两空格 文本&lt;center&gt; TEXT &lt;/center&gt;&lt;left&gt; TEXT &lt;/left&gt;&lt;right&gt; TEXT &lt;/right&gt;&lt;u&gt; TEXT &lt;/u&gt; 备注： 有些不清楚，需要随用随查！]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker]]></title>
    <url>%2F2019%2F08%2F11%2FDocker-Note%2F</url>
    <content type="text"><![CDATA[Docker Technology]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang]]></title>
    <url>%2F2019%2F08%2F09%2FGolang-Note%2F</url>
    <content type="text"><![CDATA[iFaithFreedom TODO List]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python]]></title>
    <url>%2F2019%2F08%2F09%2FPython-Note%2F</url>
    <content type="text"><![CDATA[Python Note]]></content>
      <categories>
        <category>Python</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux]]></title>
    <url>%2F2019%2F08%2F09%2FLinux-Note%2F</url>
    <content type="text"><![CDATA[Linux TODO ListCentos Ubuntu]]></content>
      <categories>
        <category>Linux</category>
        <category>Ubuntu</category>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP]]></title>
    <url>%2F2019%2F08%2F09%2FPHP-Note%2F</url>
    <content type="text"><![CDATA[iFaithFreedom TODO ListPHP基础PHP进阶PHP高阶More…]]></content>
      <categories>
        <category>PHP</category>
        <category>Laravel</category>
        <category>ThinkPHP</category>
        <category>Yii</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim]]></title>
    <url>%2F2019%2F08%2F09%2FVim-Note%2F</url>
    <content type="text"><![CDATA[iFaithFreedom 6 种模式普通模式 插入模式 可视模式 选择模式 命令行模式 Ex模式 普通模式ddndddjdGdggdbdw 插入模式iIaAxXsS 可视模式与普通模式相似 选择模式Ctrl + vShift + v 命令行模式：执行命令/ ：搜索? ：搜索! ：过滤命令 Ex模式与命令行模式相似，在使用 :visual 命令离开Ex模式前，可一次执行多条命令 文件操作filename = x.x-r x.x:-R x.x: x.x: n x.x: /pattern x.x: -c command x.x 编辑操作i: 光标所在处插入I: 所在行的第一个非空格符处开始插入o: 光标所在行的下一行输入新的一行O: 光标所在行的上一行输入新的一行a: 光标所在的下一个字符处开始输入A: 光标所在行的最后一个字符处开始输入r: 取代光标所在的那个一字符一次R: 取代光标所在的文字，直到按下 ESC为止 查找文本/abc:/^abc:/abc$:?abc:n:N: 替换文本r:R::s/x/x1/g::x1,x2s/y1/y2/g::g/x1/x2/g 删除文本x: 向后删除一个字符 X: 向前删除一个字符 nx：连续向后删除n个字符dd: 删除光标所在的一整行ndd: 删除光标所在的向下n行dG: 删除光标所在到最后一行的所有数据d$: 删除光标所在处到最后一个字符d0: 删除光标所在处到该行的最前面一个字符D: 删除光标末尾的字符:x1,x2d p: 粘贴被删除的文本内容 复制文本p: 粘贴通过复制下的行数和字符P: 会增加行数yy: 复制光标所在的那一行nyy: 复制光标所在的向下n行y1G: 复制光标所在行的第一行的所有数据y0: 复制光标所在的那个字符到该行行首的所有数据y$: 复制光标所在的那个字符到该行行尾的所有数据yw:J: 将光标所在行与下一行的数据结合成同一行c: 重复删除多个数据u: 复原前一个动作Ctrl+r: 重做上一个动作 保存退出:wq 保存并退出:wq! 强制保存并退出:q 离开vim:q! 强制退出不保存:w 将文本保存:w! 若文件为只读时，强制写入该档案。但取决于权限:w xxx.xx: 将编辑的数据保存成另一个档案，类似于另存:x!:n1,n2 w filename : 将n1到n2的内容存储成filename这个档案ZZ: 文件没有改动，则不保存离开，若改动，则保存后离开:! command: 暂时离开vim到指令模式下执行命令 方向键h : 向左 H : 屏幕上方那一行的第一个字符j : 向下 M : 屏幕中央那一行的第一个字符k : 向上 L : 屏幕下方…l : 向右 G : 移到档案的最后一行Ctrl + f : 屏幕向下一页Ctrl + b : 屏幕向上一页Ctrl + d : 屏幕向下移动半页Ctrl + u : 屏幕向上移动半页 : 光标移动到非空格符的下一行 ： 光标移动到非空格符的上一行n : n 表示数字，按下数字再按空格键 光标以单词位单位移动w|W :b|B :e|E :nw|nW :nb|nB : 光标移动至行首或行尾0 | ^ : 光标移动到行首$ : 光标移动到行尾n$ : 光标移动到指定字符fx :Fx : 光标移动到指定行gg : 移到档案第一行G : 移到档案最后一行nG : 移动到档案的第n行:n : 光标向下移动n行 光标移动到匹配的括号处% : 将光标先定位到 “{“ ,然后再使用 “ % “ 命令，可定位到 “ } “ 批量注释和自定义注释快捷键s/^/#/g :eg: :1,10s/^/#/g : 取消连续行注释:1,10s/^#//g : :map 快捷键 执行命令Vim map Vim]]></content>
      <categories>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git]]></title>
    <url>%2F2019%2F08%2F09%2FGit-Note%2F</url>
    <content type="text"><![CDATA[iFaithFreedom Git建Git仓库两种场景： 1. 把已有的项目代码纳入Git管理cd 项目代码所在的文件夹git init 2. 新建的项目直接用Git管理cd 某个文件夹git init your_project # 会在当前路径下创建和项目名称同名的文件夹cd your_project Git 分离头指针在没有绑定分支的情况下，git status 会显示 HEAD， 后面需要 git branch xxx head_id 如果没有保存，会被当作垃圾清理掉HEAD branchgit checkout -b xxx yyy // 基于yyy 创建 xxx 分支 HEAD 可脱离分支，独立存在git diff // 比较两个commit 的不同 git diff HEAD HEAD^ | HEAD～n 查看不同提交的指定文件的差异git diff 分支1 分支2 -- 文件 // 比较不同分支的差异 git diff 分支指针1 分支指针2 -- 文件 // 用分支比较文件的差异正确删除文件的方法git rm xxx // 删除xxx 文件开发中临时加塞了紧急任务的处理方法git stash // 把现在做的工作任务存放到不影响接下来要做的工作环境中去 git stash list // 查看所有的stash 任务的列表 git status git stash apply // 弹出最新的stash， 不保留stash 的任务 git stash pop // 弹出最新的stash 工作，存放起来的任务还在指定不需要Git管理的文件.gitignore // 文件中添加不需要被提交的文件类型将Git仓库备份到本地git clone --bare // 不在工作区的仓库 哑协议： git clone --bare 本地仓库.git 新建仓库name.git添加公钥到Github SSH and GPG keys在Github 创建个人仓库把本地仓库同步到Githubgit remote add xxx git@github.com:aspire_8/xxx.git // 新增远程Github仓库 git remote remove xxx // 删除远程Github仓库 git remote rename oldName newName // 更改远程Github仓库的名称 git push xxx -all // 提交本地所有分支到远端一般出错的情况在推送前，需要先 拉取 远程仓库到本地 git pull // 拉取远程到本地并且合并，等同于 git fetch + git merge git fetch // 仅仅把远端的拉到本地 git merge 远端分支/本地分支(master) // 合并分支把不相干的两个分支合并git merge --allow-unrelater-histories 远端仓库/本地仓库不同人修改了同文件的不同区域的处理方案git push不同人修改了同文件的同一区域的处理方案global: git pull vim xxx.xx git push local : git pull vim xxx.xx git push 会出错，local没办法提交，解决方案 vim xxx.xx // 把修改的同一地方，删除其中一个人的修改，删除git的提示信息 git status -&gt; git commit -am &apos;解决冲突&apos; -&gt; git push同时变更了文件名和文件内容的处理方案global 在更改同一文件名和内容之后 local 在本地修改文件内容， git pull 的时候，git会弹出界面提示修改的信息，同时也会在被更改文件中，添加local修改的内容 把同一文件改成不同文件名的处理方案global: 修改xxx.xx 为 xxxa.xx，local: 修改 xxx.xx 为 xxb.xx global: git push local: git pull , git rm xxx.xx, git rm xxa.xx, git add xxb.xx, git commit -m &apos;delete xxx.xx xxa.xx&apos; git push禁止向集成分支执行push -f 操作git push -f 示例: git log --oneline // 查看历史日志 git reset --hard commitID // 在本地使用reset 恢复到 任意一个commit的历史，如果使用 -f 提交的话，远程仓库所有被提交的commit之前的改动都会被删除掉，很危险！！！ 禁止向集成分支执行变更历史的操作]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生活日记]]></title>
    <url>%2F2019%2F08%2F08%2Farticle%2F</url>
    <content type="text"><![CDATA[记： 七夕节，回家做晚饭，吃完饭大概八点多，躺了一会，出去散了个步，回到家十点半，洗了个澡，十一点。然后闲着无聊，开始着手部署博客项目。到现在是8.8号凌晨 两点多。阿哈，真累！ 以后要养成记笔记的习惯，哈哈，不然学会的东西很快就会忘记的额～！ vim docker linux]]></content>
      <categories>
        <category>Life</category>
        <category>Year</category>
        <category>Month</category>
        <category>Day</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
</search>
