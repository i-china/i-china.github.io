<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iFaithFreedom</title>
  
  <subtitle>文能提笔安天下，武能上马定乾坤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-16T14:01:13.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>&lt;center&gt; Hale Lv &lt;/center&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker</title>
    <link href="http://yoursite.com/2019/08/16/Docker-Note/"/>
    <id>http://yoursite.com/2019/08/16/Docker-Note/</id>
    <published>2019-08-16T13:34:17.000Z</published>
    <updated>2019-08-16T14:01:13.537Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a><h3 id="Docker-基础"><a href="#Docker-基础" class="headerlink" title="Docker 基础"></a>Docker 基础</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">install </span><br><span class="line"></span><br><span class="line">windwos: Control Panel  -&gt; open: Hyper-V 和  容器</span><br><span class="line">[Docker.exe](https://www.docker.com/products/docker-desktop)</span><br><span class="line">Mac os : </span><br><span class="line">[Docker.dmg](https://www.docker.com/products/docker-desktop)</span><br><span class="line">Linux  :</span><br><span class="line">wget -qO- https://get.docker.com/ | sh</span><br><span class="line">usermod -aG docker your-user</span><br><span class="line">Windows Server :</span><br><span class="line">Install-Module DockerProvider -Force</span><br><span class="line">Install-Package Docker -ProviderName DockerProvider -Force</span><br><span class="line"></span><br><span class="line">Update Docker </span><br><span class="line">apt update</span><br><span class="line">apt remove docker docker-engine docker-ce docker.io -y</span><br><span class="line">wget -qO- https://get.docker.com/ | sh</span><br><span class="line">systemctl enable docker// 设置开机启动</span><br><span class="line">systemctl is-enabled docker//检测是否开机启动</span><br><span class="line"></span><br><span class="line">Docker Storage Driver: 存储驱动</span><br><span class="line">/etc/docker/daemon.json:&#123;&quot;storage-driver&quot;:&quot;overlay2&quot;&#125;</span><br><span class="line">docker system info//检查docker当前的存储驱动类型</span><br></pre></td></tr></table></figure><h4 id="运维角度看Docker"><a href="#运维角度看Docker" class="headerlink" title="运维角度看Docker"></a>运维角度看Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">镜像：docker image ls </span><br><span class="line">容器：docker container run -it ubuntu:latest /bin/bash// -it 交互模式</span><br><span class="line">ps -ef//查看全部进程</span><br><span class="line">docker container ls// 系统内全部处于运行状态的容器</span><br><span class="line">docker container exec// 将shell连接到一个运行中的容器终端</span><br><span class="line">docker container exec -it &lt;options&gt; &lt;container-name or container-id&gt; &lt;command/app&gt;</span><br><span class="line">Ctrl + PQ// 退出容器</span><br><span class="line">docker container stop &lt;container-name or container-id&gt;// 停止容器</span><br><span class="line">docker container rm &lt;container-name or container-id&gt;// 删除容器</span><br><span class="line">docker container ls -a//列出所有容器 包括已删除的</span><br></pre></td></tr></table></figure><h4 id="开发角度看Docker"><a href="#开发角度看Docker" class="headerlink" title="开发角度看Docker"></a>开发角度看Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">clone web应用代码cd xxx  -&gt;  ls -l -&gt; cat Dockfile </span><br><span class="line">-&gt; docker image build// 根据Dockerfile中的指令来创建新的镜像</span><br><span class="line">-&gt; docker image build -t xxx:latet .</span><br><span class="line"></span><br><span class="line">Docker 引擎 engine</span><br><span class="line">[总体逻辑](http://c.biancheng.net/uploads/allimg/190416/4-1Z416140U0537.gif)</span><br><span class="line">组成： Docker Client、 Docker daemon、 Contained 、runc </span><br><span class="line">[引擎架构](http://c.biancheng.net/uploads/allimg/190416/4-1Z41614102M63.gif)</span><br><span class="line">启动一个新的容器</span><br><span class="line">docker container run --name ctr1 -it alpine:latest sh</span><br><span class="line">[启动过程](http://c.biancheng.net/uploads/allimg/190416/4-1Z4161413112O.gif)</span><br><span class="line">daemon 作用</span><br><span class="line">镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排</span><br><span class="line"></span><br><span class="line">Docker镜像</span><br><span class="line">docker container run</span><br><span class="line">docker service create//从某个镜像启动一个或多个容器</span><br><span class="line">拉取镜像</span><br><span class="line">docker image pull xxx:latest// xxx 为镜像名 latest 为版本</span><br><span class="line">docker image ls// 检查docker主机本地仓库是否包含镜像</span><br><span class="line">镜像仓库服务 Image Registry </span><br><span class="line">镜像命名和标签</span><br><span class="line">拉取镜像：docker image pull &lt;repository&gt;:&lt;tag&gt;</span><br><span class="line">docker image pull ubuntu:latest// 从官方ubuntu库拉取标签为latest的镜像</span><br><span class="line">拉取某组织的镜像: docker image pull microsoft/powershell:nanoserver</span><br><span class="line">为镜像打多个标签</span><br><span class="line">docker image pull -a nigelpoulton/tu-demo</span><br><span class="line">返回镜像列表内容</span><br><span class="line">docker image ls --filter dangling=true//返回没有标签的镜像(悬虚镜像)，显示为 &lt;none&gt;:&lt;none&gt;</span><br><span class="line">移除全部的悬虚镜像: docker image prune</span><br><span class="line">过滤器：dangding: 返回悬虚镜像(true), 非悬虚镜像(false)</span><br><span class="line">before :需要镜像名称或者id，返回在之前被创建的全部镜像</span><br><span class="line">since :类似before，返回指定镜像之后创建的全部镜像</span><br><span class="line">label :根据标注(label)的名称或者值，进行过滤 </span><br><span class="line">docker image ls --filter=reference=&quot;*.latest&quot;</span><br><span class="line">docker image ls --format &quot;&#123;&#123;.Size&#125;&#125;&quot;//通过Go模板对输出内容格式化</span><br><span class="line">docker image ls --format &quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;:&#123;&#123;.Size&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">搜索Docker Hub </span><br><span class="line">docker search xxx// xxx 为 仓库名称</span><br><span class="line">docker search xxx --filter &quot;is-official=true&quot;// 返回官方镜像</span><br><span class="line">docker search xxx --filter &quot;is-automated=true&quot;//显示自动创建的仓库</span><br><span class="line"></span><br><span class="line">镜像和分层</span><br><span class="line">Docker 镜像由一些 松耦合 的只读镜像层组成</span><br><span class="line">查看镜像分层： docker image inspect xxx:latest</span><br><span class="line">查看镜像的构建历史记录： docker history </span><br><span class="line">[镜像层](http://c.biancheng.net/uploads/allimg/190416/4-1Z416164115364.gif)</span><br><span class="line">共享镜像层</span><br><span class="line">docker image pull -a xxx/xxx</span><br><span class="line">本地产看镜像摘要：docker image ls --digests xxx</span><br><span class="line">在docker主机删除镜像：docker image rm xxx:latest</span><br><span class="line">多层架构的镜像</span><br><span class="line">[Multi-architecture Image](http://c.biancheng.net/uploads/allimg/190416/4-1Z416164446156.gif)</span><br><span class="line">删除本地镜像： docker image rmcontainer-id</span><br><span class="line">获取本地全部镜像:  docker image ls -q </span><br><span class="line">删除本地全部镜像:  docker image rm $(docker image ls -q) -f </span><br><span class="line"></span><br><span class="line">Docker 镜像常用命令</span><br><span class="line">docker image pull//下载镜像</span><br><span class="line">docker image pull xxx:xxx//下载指定镜像</span><br><span class="line">docker image ls//列出全部镜像</span><br><span class="line">docker image inspect//列出镜像层数数据和元数据</span><br><span class="line">docker image rm//删除镜像</span><br><span class="line">docker image rm xxx:xxx//删除指定镜像</span><br><span class="line"></span><br><span class="line">Docker 容器</span><br><span class="line">docker container run//启动容器</span><br><span class="line">docker container run &lt;image&gt; &lt;app&gt;// 指定启动所需的镜像及要运行的应用</span><br><span class="line">docker container run xxx:xxx sleep 10// shell连接到容器 10s 的时间</span><br><span class="line">docker container stop//手动停止容器运行</span><br><span class="line">docker container start//再次启动该容器</span><br><span class="line">docker container rm// 删除容器</span><br><span class="line"></span><br><span class="line">容器和虚拟机</span><br><span class="line">[](http://c.biancheng.net/uploads/allimg/190417/4-1Z41G01336346.gif)</span><br><span class="line"></span><br><span class="line">检擦Docker daemon</span><br><span class="line">docker version</span><br><span class="line">如果server 部分有错，需要 usermod -aG docker &lt;user&gt; 添加到本地docker 组</span><br><span class="line">检查docker daemon状态</span><br><span class="line">service docker status </span><br><span class="line">systemctl is-active docker </span><br><span class="line"></span><br><span class="line">启动一个简单容器</span><br><span class="line">docker container run </span><br><span class="line">docker container run &lt;options&gt; &lt;im- age&gt;:&lt;tag&gt; &lt;app&gt;</span><br><span class="line">docekr 默认非TLS网络端口为 2375 ， TLS端口为 2376</span><br><span class="line"></span><br><span class="line">容器进程：ps -ef </span><br><span class="line"></span><br><span class="line">查看正在运行的容器列表</span><br><span class="line">docker container ls </span><br><span class="line"></span><br><span class="line">启动容器后，重新连接到Docker</span><br><span class="line">docker container exec -it &lt;container-name or container-id&gt; bash </span><br><span class="line"></span><br><span class="line">停止容器</span><br><span class="line">docker container stop &lt;container-id or container-name&gt;</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker container rm &lt;container-id&gt;</span><br><span class="line"></span><br><span class="line">容器生命周期</span><br><span class="line">docker container run --name percy -it xxx:xxx /bin/bash</span><br><span class="line">Ctrl - PQ 组合键退出当前容器</span><br><span class="line"></span><br><span class="line">优雅地停止容器</span><br><span class="line">docker container stop// 向容器内的PID 1进程发送 SIGTERM 信号，优雅结束10s时间</span><br><span class="line"></span><br><span class="line">没有预警停止容器</span><br><span class="line">docker container stop &lt;container&gt; -f</span><br><span class="line">docker container rm &lt;container&gt; -f// -f 不会发送 SIGTERM，直接发出 SIGKILL </span><br><span class="line"></span><br><span class="line">利用重启策略进行容器的自我修复</span><br><span class="line">容器支持的重启策略： always  unless-stopped  on-failed </span><br><span class="line">docker container run --name xxx -it --restart always xx sh</span><br><span class="line">exit</span><br><span class="line">docker container ls </span><br><span class="line">1. 创建两容器</span><br><span class="line">docker container run -d --name always --restart always alpine sleep 1d </span><br><span class="line">docker container run -d --name unless-stopped --restart unless-stopped alpine sleep 1d </span><br><span class="line">docker container ls </span><br><span class="line">2. 停止两容器</span><br><span class="line">docker container stop always unless-stopped</span><br><span class="line">docker container ls</span><br><span class="line">3. 重启 Docker </span><br><span class="line">systemctl restart docker</span><br><span class="line">4. 检查两状态</span><br><span class="line">docker container ls -a </span><br><span class="line">结论：always 重启了，unless-stopped 没有重启</span><br></pre></td></tr></table></figure><h4 id="Web服务器示例"><a href="#Web服务器示例" class="headerlink" title="Web服务器示例"></a>Web服务器示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d --name webserver -p 80:8080 nigelpoulton/pluralsight -docker -ci//-d后台模式-p 80:8080 端口映射 将Docker主机的80端口映射到容器内的8080端口</span><br><span class="line">docker container stopdocker container pausedocker container startdocker container rm </span><br><span class="line"></span><br><span class="line">查看容器详情</span><br><span class="line">docker container inspect </span><br><span class="line">快速清理</span><br><span class="line">$()</span><br><span class="line">rm $(docker image ls -q)|($docker container ls -aq)</span><br><span class="line">docker container rm</span><br><span class="line"></span><br><span class="line">Docker容器常用命令</span><br><span class="line">docker container run//启动新容器</span><br><span class="line">docker container ls//列出在运行(UP)， -a: 列出停止的(Exited)</span><br><span class="line">docker container exec//连接该容器 -it &lt;container-name or container-id&gt; bash </span><br><span class="line">docker container stop//停止运行中的容器</span><br><span class="line">docker container start//重启停止(Exited)状态的容器 &lt;container-id or contaienr -name&gt;</span><br><span class="line">docker container rm//删除停止运行的容器</span><br><span class="line">docker container inspect//显示容器配置细节和运行时信息 &lt;container-id or container-name&gt;</span><br><span class="line"></span><br><span class="line">Docker应用容器化(将应用程序部署到容器中)</span><br><span class="line">容器化：将应用整合到容器中并且运行起来的过程，能够简化应用的构建、部署和运行过程</span><br><span class="line">完整的应用容器化过程分为以下步骤</span><br><span class="line">1. 编写应用代码</span><br><span class="line">2. 创建一个Dockfile，包括应用的描述、依赖、及如何运行应用</span><br><span class="line">3. 对该Dockerfile 执行 docker image build 命令</span><br><span class="line">4. 等待Docker将应用程序构建到Docker镜像中</span><br><span class="line">[步骤](http://c.biancheng.net/uploads/allimg/190417/4-1Z41G51T3502.gif)</span><br><span class="line"></span><br><span class="line">单体应用容器化</span><br><span class="line">步骤：</span><br><span class="line">1， 获取应用代码</span><br><span class="line">2.  分析 Dockfile</span><br><span class="line">3.  构建应用镜像</span><br><span class="line">4.  运行该应用</span><br><span class="line">5.  测试应用</span><br><span class="line">6.  容器应用化细节</span><br><span class="line">7.  生产环境中的多阶段构建</span><br><span class="line">8.  最佳实践</span><br><span class="line"></span><br><span class="line">登录到Docker Hub</span><br><span class="line">docker login// 登录到docker</span><br><span class="line">docker image push// 推送到docker</span><br><span class="line">docker image tag web:latest xxx/web:latest// 为镜像打标签</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker image build// 读取Dockerfile，并将应用程序容器化</span><br><span class="line">Dockerfile 示例代码：</span><br><span class="line"># Linux x64</span><br><span class="line">FROM xxx</span><br><span class="line"></span><br><span class="line">LABEL maintainer=&quot;mr_hale@163.com&quot;</span><br><span class="line"></span><br><span class="line"># install Node and NPM </span><br><span class="line">RUN apk and --update nodejs nodejs-npm</span><br><span class="line"></span><br><span class="line"># Copy app to /src</span><br><span class="line">COPY ./src</span><br><span class="line"></span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line"># Install dependencies </span><br><span class="line">RUN npm install </span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;node&quot;,&quot;./app.js&quot;]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">-t ： 为镜像打标签</span><br><span class="line">-f ： 指定Dockerfile 的路径和名称，指定位于任意路径下的任意名称的Dockerfile</span><br><span class="line">FROM ：用于指定要构建的镜像的基础镜像，通常是Dockerfile 中的第一条指令</span><br><span class="line">RUN ： 用于在镜像中执行命令，会创建新的镜像层，每个指令创建一个新的镜像层</span><br><span class="line">COPY ： 用于将文件作为一个新的层添加到镜像中，使用COPY指令将应用代码赋值到镜像中</span><br><span class="line">EXPOSE ： 记录应用所使用的网络端口</span><br><span class="line">ENTRYPOINT ： 指定镜像以容器方式启动后默认运行的程序</span><br><span class="line">LABEL ：</span><br><span class="line">ENV ：</span><br><span class="line">ONBUILD ：</span><br><span class="line">HEALTHCHECK ：</span><br><span class="line">CMD ：</span><br></pre></td></tr></table></figure><h3 id="Dockers-Compose"><a href="#Dockers-Compose" class="headerlink" title="Dockers Compose"></a>Dockers Compose</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">与Docker Stack类似，在Docker节点上，以单引擎模式(Single-Engine Mode)进行多容器应用的部署和管理</span><br><span class="line">如：一个间的示例应用可能有4个服务组成</span><br><span class="line">1. Web前端</span><br><span class="line">2. 订单管理</span><br><span class="line">3. 品类管理</span><br><span class="line">4. 后台数据库</span><br><span class="line">Compose 用来部署和管理繁多的服务</span><br><span class="line">使用：首先编写定义多容器(多服务)应用的YAML文件，然后由 docker-compose 命令处理，基于Docker引擎API完成应用的部署</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">使用curl下载二进制文件，然后 chmod 修改权限</span><br><span class="line">检验： docker-compose --version</span><br><span class="line">用 pip 安装 Docker Compose 的 python 包</span><br><span class="line"></span><br><span class="line">Docker Compose YML 配置文件及常用指令</span><br><span class="line">YAML 定义多服务的应用，是JSON的子集，可使用JSON定义</span><br><span class="line">默认使用文件名 docker-compose.yml, 也可使用-f参数指定具体文件</span><br><span class="line">示例：包含  web-fe 、 redis 的小型Flask应用</span><br><span class="line">能够对其访问者进行计数并将其保存到Redis的简单Web服务</span><br><span class="line">version: &quot;1.0&quot;</span><br><span class="line">services:</span><br><span class="line">web-fe:</span><br><span class="line">build:.</span><br><span class="line">command: python app.py</span><br><span class="line">ports:</span><br><span class="line">- taget: 5000</span><br><span class="line">published: 5000</span><br><span class="line">networks:</span><br><span class="line">- counter-net</span><br><span class="line">volumes:</span><br><span class="line">- type: volume</span><br><span class="line">source: counter-vol</span><br><span class="line">target: /code</span><br><span class="line">redis:</span><br><span class="line">image: &quot;redis:alpine&quot;</span><br><span class="line">networks:</span><br><span class="line">counter-net:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">counter-net:</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">counter-vol:</span><br><span class="line"></span><br><span class="line">包含4个一级key： version、services、networks、volumes</span><br><span class="line">version: 指定版本</span><br><span class="line">services: 定义不同的应用服务，compose 会将每个服务部署到各自的容器中</span><br><span class="line">networks：指引docker创建新的网络，默认 创建 bridge 网络，也可以使用driver属性指定网络类型,允许独立的容器连接到该网络上</span><br><span class="line">networks:</span><br><span class="line">over-net:</span><br><span class="line">driver: overlay</span><br><span class="line">attachable: true</span><br><span class="line">volumes: 指定docker创建新的卷</span><br><span class="line"></span><br><span class="line">定义了两个Key：web-fe 、redis，因此Docker Compose部署两容器，一个包含web-fe，一个redis</span><br><span class="line">web-fe服务定义中，包含以下指令：</span><br><span class="line">1. build： 指定docker基于当前目录 (.) 下dockerfile来构建新景象，用于启动该服务的容器</span><br><span class="line">2. command： 指定docker在容器中执行名为 app.py 的Python脚本作主程序</span><br><span class="line">3. ports： 将容器内(-target)的5000端口映射到主机(published)的5000端口</span><br><span class="line">4. networks：是的docker将服务连接到指定的网络上</span><br><span class="line">5. volumes：将counter-vol卷(source:)挂载到容器内的 /code (target:)</span><br><span class="line">6. image： redis:alpine 是的docker基于redis:alpine 镜像启动一个独立的名为redis的人弄国企，镜像会从docker hub上拉取下来</span><br><span class="line">7. networks：配置redis容器连接到counter-net网络</span><br><span class="line"></span><br><span class="line">Docker-Compose 部署应用</span><br><span class="line">在项目目录中，检查文件是否存在</span><br><span class="line">app.py:应用程序代码 Flask应用</span><br><span class="line">docker-compose.yml: compose文件，定义了Docker如何部署应用</span><br><span class="line">Dockerfile:定义了如何构建web-fe服务所使用的镜像</span><br><span class="line">requirements.txt: 列出了应用所依赖的python包</span><br><span class="line"></span><br><span class="line">启动应用：</span><br><span class="line">docker-compose up &amp;</span><br><span class="line">docker-compose -f prod-equus-bass.yml up//基于名为 prod... 的compose文件部署应用</span><br><span class="line">docker-compose up -d// 没有-d 用 &amp; 将终端窗口返回</span><br><span class="line"></span><br><span class="line">FROM python:3.4-alpine &lt;&lt;  基础镜像</span><br><span class="line">ADD ./code   &lt;&lt;将app复制到镜像中</span><br><span class="line">WORKDIR /code   &lt;&lt;设置工作目录</span><br><span class="line">RUN pip install -r requirements.txt   &lt;&lt; 安装依赖</span><br><span class="line">CMD [&quot;python&quot;,&quot;app.py&quot;]  &lt;&lt; 设置默认启动命令</span><br><span class="line"></span><br><span class="line">若 .Services.redis 中指定了image: &quot;redis:alpine&quot;，会从docker hub拉取redis:alpine 镜像</span><br><span class="line">docker container ls</span><br><span class="line">docker network ls </span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line">使用Docker-Compose 子命令</span><br><span class="line">docker-compose up -d//拉取和构建的镜像保存在系统中</span><br><span class="line">docker-compose ps//列出容器名称、command、状态、网络端口</span><br><span class="line">docker-compose top//列出各个服务(容器)内运行的进程</span><br><span class="line">docker-compose stop//停止应用，但不删除</span><br><span class="line">docker-compose rm//删除应用相关的容器和网络，但不删除卷和镜像</span><br><span class="line">docker-compose restart//重启应用</span><br><span class="line">docker-compose down//停止和关闭应用</span><br><span class="line"></span><br><span class="line">./code </span><br><span class="line">[Dockerfile and Compose file](http://c.biancheng.net/uploads/allimg/190417/4-1Z41GJ242b5.gif)</span><br></pre></td></tr></table></figure><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">集群管理工具，作用：把若干台Docker主句抽象为一个整体，通过一个入口统一管理各种Docker资源。 类似 Kubernetes，包含：企业级的Docker安全集群，微服务应用编排引擎</span><br><span class="line">默认内置： 分布式集群存储、加密网络、公用TLS、安全集群接入令牌、简化数字证书管理的PKI</span><br><span class="line">基于Docker引擎之上的独立产品</span><br><span class="line">一个Swarm由一个或多个Docker节点组成，通过可靠的网络相连。</span><br><span class="line">节点被配置为管理节点(Manager)和工作节点(Worker)， 管理节点负责集群控制面，进行诸如监控集群状态、分发任务至工作节点等操作。 工作节点接受来自管理节点的任务并执行</span><br><span class="line">[Swarm](http://c.biancheng.net/uploads/allimg/190418/4-1Z41Q045505Y.gif)</span><br><span class="line"></span><br><span class="line">集群搭建：</span><br><span class="line">[Swarm](http://c.biancheng.net/uploads/allimg/190418/4-1Z41Q24Z2332.gif)</span><br><span class="line">每个节点装 Docker，并能够与Swarm的其他节点通信</span><br><span class="line">防火墙开放以下端口：</span><br><span class="line">2377/tcp:用于客户端与Swarm进行安全通信</span><br><span class="line">7946/tcp 与 7946/udp: 用于控制面gossip分发</span><br><span class="line">4789/udp: 用于基于VXLAN的覆盖网络</span><br><span class="line"></span><br><span class="line">大体流程：初始化第一个管理节点 -&gt; 加入额外的管理节点 -&gt; 加入工作节点 -&gt; 完成</span><br><span class="line"></span><br><span class="line">初始化一个全新的Swarm：</span><br><span class="line">[Swarm](http://c.biancheng.net/uploads/allimg/190418/4-1Z41Q25041I0.gif)</span><br><span class="line">在单引擎模式下的Docker 主机执行 docker swarm init 切换到swarm模式</span><br><span class="line">接入额外的管理节点，并切换为Swarm模式</span><br><span class="line">docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377</span><br><span class="line">docker swarm init// 初始化并设置为第一个管理节点，开始swarm模式</span><br><span class="line">--advertise-addr// 指定其他节点用来连接到当前管理节点的IP和端口，可选</span><br><span class="line">--listen-addr// 用于承载Swarm流量的IP和端口</span><br><span class="line">docker node ls// 列出Swarm 节点</span><br><span class="line">docker swarm join-token// 获取添加新的工作节点和管理节点到Swarm的命令和Token</span><br><span class="line">docker swarm join-token worker</span><br><span class="line">docker swarm join-token manager </span><br><span class="line">docker swarm join --token SWMTKN-1-0uahebax...ca... 10.0.0.1:2377 --advertise-addr 10.0.0.4:2377 --listen-addr 10.0.0.4:2377</span><br><span class="line"></span><br><span class="line">Swarm 管理器高可用性(HA)</span><br><span class="line">[Swarm HA](http://c.biancheng.net/uploads/allimg/190418/4-1Z41Q25541296.gif)</span><br><span class="line">[详细文章：](http://c.biancheng.net/view/3178.html)</span><br><span class="line"></span><br><span class="line">内置的Swarm 安全机制</span><br><span class="line"></span><br><span class="line">锁定Swarm</span><br><span class="line">启用锁：docker swarm init --autolock</span><br><span class="line">解锁  ：docker swarm init --unlock</span><br><span class="line"></span><br><span class="line">Docker Swarm 服务的部署及操作</span><br><span class="line">docker service create// 创建一个新的服务</span><br><span class="line">docker service create --name web-fe -p 8080:8080 --replicas 5 xxx/xxx </span><br><span class="line">与 docker container run 相似，--name：将其命名为 web-fa -p：映射端口</span><br><span class="line">查看服务：</span><br><span class="line">docker service ls </span><br><span class="line">查看服务副本列表及个副本的状态：</span><br><span class="line">docker service ps &lt;service-name or serviceid&gt;</span><br><span class="line">查看服务详细信息：</span><br><span class="line">docker service inspect --pretty xxx// --pretty 易于阅读的格式</span><br><span class="line"></span><br><span class="line">副本服务 VS  全局服务：</span><br><span class="line">副本模式：服务的默认复制模式(Replication Mode) 是副本模式(replicated)</span><br><span class="line">全局模式：global </span><br><span class="line">docker service create --mode global </span><br><span class="line">服务的扩缩容：</span><br><span class="line">大流量情况下： </span><br><span class="line">docker service scale web-fa=10// 对web-fa服务扩容，将服务副本由5个增加到10个</span><br><span class="line">检查操作是否成功：</span><br><span class="line">docker service ls </span><br><span class="line">显示服务副本在各个节点上是均衡分布：</span><br><span class="line">dockers service ps </span><br><span class="line">减少副本树：</span><br><span class="line">docker service scale web-fa=5// 从10个降为5个</span><br><span class="line">删除服务：</span><br><span class="line">docker service rm web-fa </span><br><span class="line">docker service ls </span><br><span class="line">滚动升级：</span><br><span class="line">docker network create -d overlay uber-net// 创建网络并将服务接入网络</span><br><span class="line">[](http://c.biancheng.net/uploads/allimg/190418/4-1Z41Q4221H59.gif)</span><br><span class="line">docker network ls// 查看网络是否创建成功</span><br><span class="line"></span><br><span class="line">docker service create --name uber-svc --network uber-net -p 80:80 --replicas 12 xxxx/xxx </span><br><span class="line">docker service create --name uber-svc --network uber-net -publish published=80,target=80,mode=host --replicas 12 xxx/xxx</span><br><span class="line">docker service update// 更新运行中的服务</span><br><span class="line">docker service ps</span><br><span class="line">docker inspect --pretty</span><br><span class="line"></span><br><span class="line">Docker Swarm 服务日志及相关配置</span><br><span class="line">docker service log//查看服务的日志</span><br><span class="line">节点默认配置服务是 json-file 日志驱动，还有 journald(仅限systemctl的linux主机)、syslog、splunk、gelf</span><br><span class="line">json-file和journald 可用logs命令</span><br><span class="line">docker service logs &lt;service-name&gt;</span><br><span class="line">第三方日志驱动：</span><br><span class="line">&#123;</span><br><span class="line">&quot;log-driver&quot;:&quot;syslog&quot;</span><br><span class="line">&#125;</span><br><span class="line">docker service create --logdrive --log-opts// 强制某服务使用一个不同的日志驱动，会覆盖 daemon.json的配置</span><br><span class="line">--follow ：进行跟踪</span><br><span class="line">--tail :显示最近的日志</span><br><span class="line">--details ： 获取额外细节</span><br></pre></td></tr></table></figure><h5 id="Docker-Swarm-汇总"><a href="#Docker-Swarm-汇总" class="headerlink" title="Docker Swarm 汇总"></a>Docker Swarm 汇总</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init:创建新的Swarm，成为第一管理节点</span><br><span class="line">docker swarm join-token: 加入管理节点和工作节点到现有Swarm</span><br><span class="line">docker swarm join-token manager: 获取新增管理节点 </span><br><span class="line">docker swarm join-token worker:  获取新增工作节点</span><br><span class="line">docker node ls:列出Swarm中的所有节点及相关信息</span><br><span class="line">docker service create: 创建一个新服务</span><br><span class="line">docker service ls: 列出Swarm中运行的服务，如服务状态、副本等基本信息</span><br><span class="line">docker service ps &lt;service&gt;: 列出某个服务副本的信息</span><br><span class="line">docker service inspect: 获取关于服务的详细信息，--pretty 仅显示重要信息</span><br><span class="line">docker service scale: 对服务副本个数进行增减</span><br><span class="line">docker service update: 对运行中的服务属性进行变更</span><br><span class="line">docker service logs: 查看服务的日志</span><br><span class="line">docker serivce rm: 从Swarm中删除某服务，不做确认会删除服务的所有副本</span><br></pre></td></tr></table></figure><h3 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">docker image build// 读取Dockerfile，并将应用程序容器化</span><br><span class="line">Dockerfile 示例代码：</span><br><span class="line"># Linux x64</span><br><span class="line">FROM xxx</span><br><span class="line"></span><br><span class="line">LABEL maintainer=&quot;mr_hale@163.com&quot;</span><br><span class="line"></span><br><span class="line"># install Node and NPM </span><br><span class="line">RUN apk and --update nodejs nodejs-npm</span><br><span class="line"></span><br><span class="line"># Copy app to /src</span><br><span class="line">COPY ./src</span><br><span class="line"></span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line"># Install dependencies </span><br><span class="line">RUN npm install </span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;node&quot;,&quot;./app.js&quot;]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">-t ： 为镜像打标签</span><br><span class="line">-f ： 指定Dockerfile 的路径和名称，指定位于任意路径下的任意名称的Dockerfile</span><br><span class="line">FROM ：用于指定要构建的镜像的基础镜像，通常是Dockerfile 中的第一条指令</span><br><span class="line">RUN ： 用于在镜像中执行命令，会创建新的镜像层，每个指令创建一个新的镜像层</span><br><span class="line">COPY ： 用于将文件作为一个新的层添加到镜像中，使用COPY指令将应用代码赋值到镜像中</span><br><span class="line">EXPOSE ： 记录应用所使用的网络端口</span><br><span class="line">ENTRYPOINT ： 指定镜像以容器方式启动后默认运行的程序</span><br><span class="line">LABEL ：</span><br><span class="line">ENV ：</span><br><span class="line">ONBUILD ：</span><br><span class="line">HEALTHCHECK ：</span><br><span class="line">CMD ：</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Laravel</title>
    <link href="http://yoursite.com/2019/08/16/Laravel-Note/"/>
    <id>http://yoursite.com/2019/08/16/Laravel-Note/</id>
    <published>2019-08-16T13:30:48.000Z</published>
    <updated>2019-08-16T13:51:17.455Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a><h3 id="composer的安装和使用"><a href="#composer的安装和使用" class="headerlink" title="composer的安装和使用"></a>composer的安装和使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;</span><br><span class="line">&gt;&gt; php composer-setup.php</span><br><span class="line">&gt;&gt; mv composer.phar /usr/local/bin/composer</span><br><span class="line">&gt;&gt; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br><span class="line">&gt;&gt; 取消配置： composer config -g --unset repos.packagist</span><br><span class="line">&gt;&gt; composer install</span><br><span class="line">&gt;&gt; composer search xxx</span><br><span class="line">&gt;&gt; composer selfupdate</span><br><span class="line">&gt;&gt; composer show | composer show xxx </span><br><span class="line">&gt;&gt; curl -sS https://getcomposer.org/installer | php </span><br><span class="line">&gt;&gt; mv composer.phar /usr/local/bin/composer</span><br><span class="line">&gt;&gt; composer require xxx/xxx</span><br><span class="line">&gt;&gt; composer remove xxx/xxx | xxx </span><br><span class="line">&gt;&gt;  composer.json </span><br><span class="line">&#123;</span><br><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">&quot;xxx/xxx&quot;:&quot;1.0.*@beta&quot;,</span><br><span class="line">&quot;xxx/xxx&quot;:&quot;@dev&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Laravel-安装"><a href="#Laravel-安装" class="headerlink" title="Laravel 安装"></a>Laravel 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Laravel install Tool:composer global require &quot;laravel/install&quot;</span><br><span class="line">添加laravel 到系统环境变量： </span><br><span class="line">export PATH=“root/.config/composer/vendor/bin:$PATH</span><br><span class="line">$HOME/.composer/vendor/bin  主要让系统找到laravel的可执行文件</span><br><span class="line">laravel new xxx</span><br><span class="line">composer install laravel:</span><br><span class="line">composer create-project --prefer-dist laravel/laravel xxx &quot;5.5.*&quot;</span><br><span class="line"></span><br><span class="line">Web 服务器配置：</span><br><span class="line">Nginx:</span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br><span class="line">具体看微信图片收藏中的配置信息</span><br><span class="line"></span><br><span class="line">php artisan serve</span><br><span class="line">php artisan --version | php artisan -V</span><br><span class="line">php artisan down | up</span><br><span class="line"></span><br><span class="line">// 设置时区</span><br><span class="line">在 app.php 中</span><br><span class="line">&apos;timezone&apos; =&gt; &apos;Asia/Shanghai&apos;;</span><br><span class="line">&apos;timezone&apos; =&gt; &apos;PRC&apos;;</span><br><span class="line"></span><br><span class="line">初始化完成后，修改.env配置文件，配置数据库等</span><br><span class="line">exec: php artisan migrate:install// 检测数据是否迁移成功</span><br></pre></td></tr></table></figure><h1 id="文章模块"><a href="#文章模块" class="headerlink" title="文章模块"></a>文章模块</h1><p>路由:  路由 模板<br>表设计: 表设计 模型</p><h2 id="页面逻辑：-文章列表-添加文章-编辑文章-删除文章-文章详情"><a href="#页面逻辑：-文章列表-添加文章-编辑文章-删除文章-文章详情" class="headerlink" title="页面逻辑： 文章列表 添加文章 编辑文章 删除文章 文章详情"></a>页面逻辑： 文章列表 添加文章 编辑文章 删除文章 文章详情</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- HTTP 方法：</span><br><span class="line">Route::get($uri,$callback);</span><br><span class="line">get | post | put | patch | delete | options | any | macth </span><br><span class="line"></span><br><span class="line">- 路由参数</span><br><span class="line">Route::get(&apos;uri1&apos;/&#123;param1&#125;/uri2/&#123;param2&#125;&apos;,function($param1,$param2)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;)-&gt;where(&apos;param&apos;,&apos;[a-zA-z0-9]+&apos;);</span><br><span class="line"></span><br><span class="line">- 路由分组</span><br><span class="line">Route::group([&apos;prefix&apos; =&gt; &apos;xxx&apos;],function()&#123;</span><br><span class="line">Route:;get(&apos;xxx&apos;,function()&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::middleware([&apos;xxx&apos;,&apos;xxxx&apos;]) -&gt; group(function()&#123;</span><br><span class="line">Route::get(&apos;x&apos;,function()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="模型绑定"><a href="#模型绑定" class="headerlink" title="模型绑定"></a>模型绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(&apos;api/users/&#123;user&#125;&apos;,function(\App\User $user)&#123;</span><br><span class="line">return $user -&gt; email;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="创建控制器，路由"><a href="#创建控制器，路由" class="headerlink" title="创建控制器，路由"></a>创建控制器，路由</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller PostController </span><br><span class="line">Route: </span><br><span class="line">文章列表</span><br><span class="line">Route:;get(&apos;/posts&apos;,&apos;\App\Http\Controllers\PostController@index&apos;);</span><br><span class="line">创建文章</span><br><span class="line">Route:;get(&apos;/posts/create&apos;,&apos;\App\Http\Controllers\PostController@create&apos;);</span><br><span class="line">Route:;post(&apos;/posts&apos;,&apos;\App\Http\Controllers\PostController@store&apos;);</span><br><span class="line">文章详情页</span><br><span class="line">Route:;post(&apos;/posts/&#123;post&#125;&apos;,&apos;\App\Http\Controllers\PostController@show&apos;);</span><br><span class="line">编辑文章</span><br><span class="line">Route:;get(&apos;/posts/&#123;post&#125;/edit&apos;,&apos;\App\Http\Controllers\PostController@edit&apos;);</span><br><span class="line">Route:;put(&apos;/posts/&#123;post&#125;&apos;,&apos;\App\Http\Controllers\PostController@update&apos;);</span><br><span class="line">删除文章</span><br><span class="line">Route:;get(&apos;/posts/&#123;post&#125;/delete&apos;,&apos;\App\Http\Controllers\PostController@delete&apos;);</span><br><span class="line">-- 控制器</span><br><span class="line">Controller:</span><br><span class="line">namespace \App\Http\Controllers;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">class PostController exntends Controller &#123;</span><br><span class="line">public function xxx()&#123;...  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>创建文章    编辑文章    文章列表    文章详情</p><h4 id="在控制器进行页面渲染："><a href="#在控制器进行页面渲染：" class="headerlink" title="在控制器进行页面渲染："></a>在控制器进行页面渲染：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Extends Controller:</span><br><span class="line">public function  index()&#123;</span><br><span class="line">$arrs = [</span><br><span class="line">[&apos;title&apos; =&gt; &apos;totle ...&apos;], [&apos;title&apos; =&gt; &apos;titles ...&apos;], [&apos;ok&apos; =&gt; &apos;okoko&apos;],</span><br><span class="line">];</span><br><span class="line">return view(&apos;post/index&apos;,[&apos;arrs&apos; =&gt; $arr]);  // 指 post文件夹下的index.blade.php 页面</span><br><span class="line">&#125;</span><br><span class="line">-- 传递参数</span><br><span class="line">$tit = &apos;a tit&apos;;</span><br><span class="line">view(&apos;post/index&apos;,[&apos;title&apos; =&gt; &apos;text&apos;,&apos;isTrue&apos; =&gt; false,&apos;arrs&apos; =&gt; $arrs] );</span><br><span class="line">view(&apos;post/index&apos;,compact(&apos;tit&apos;,&apos;arrs&apos;));   view(&apos;post/index&apos;,compact(&apos;arrs&apos;));</span><br></pre></td></tr></table></figure><p>– Blade模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">模板语法：&#123;&#123; &#125;&#125;   @if@foreach </span><br><span class="line">参数传递： </span><br><span class="line">继承模板：extends/section/yield/content</span><br><span class="line">引入视图：include </span><br><span class="line"></span><br><span class="line">-- index.blade.php </span><br><span class="line">&#123;&#123;$title&#125;&#125;// 解析控制器中传递的变量值</span><br><span class="line">@if($isTrue == true)</span><br><span class="line">Message </span><br><span class="line">@endif</span><br><span class="line">@foreach($arrs as $arr)</span><br><span class="line">&#123;&#123;$arr&#125;&#125;</span><br><span class="line">@endforeach</span><br><span class="line"></span><br><span class="line">- 文章模块页面模板调整</span><br><span class="line">提取 layout</span><br><span class="line">提取 footer</span><br><span class="line">提取 nav</span><br><span class="line"></span><br><span class="line">layout/main.blade.php</span><br><span class="line">公用头部</span><br><span class="line">@yield(&apos;content&apos;)</span><br><span class="line">公用尾部</span><br><span class="line"></span><br><span class="line">单独拆解</span><br><span class="line">layout/footer.blade.php</span><br><span class="line">footer 的页面内容</span><br><span class="line">layout/nav.blade.php</span><br><span class="line">nav 的页面内容</span><br><span class="line"></span><br><span class="line">模板集成与包含</span><br><span class="line">post/index.blade.php</span><br><span class="line">@extends(&apos;layout.main&apos;)</span><br><span class="line">@section(&apos;content&apos;)</span><br><span class="line">@include(&apos;layout.nav&apos;)</span><br><span class="line">index 中的页面内容</span><br><span class="line">@include(layout.footer)</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure><h3 id="文章模块数据表"><a href="#文章模块数据表" class="headerlink" title="文章模块数据表"></a>文章模块数据表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">使用 migrate 创建数据表</span><br><span class="line">外键 user_id</span><br><span class="line">时间 created_at/updated_at</span><br><span class="line">migration： 数据库同步迁移</span><br><span class="line">php artisan make:migration create_posts_table// 格式：create_ 数据表名_table </span><br><span class="line">在创建好的create_posts_table.php中</span><br><span class="line">pubic function up()&#123;// 创建表用crate  更新表用 table</span><br><span class="line">Scheme::create(&apos;posts&apos;,function(Blueprint $table)&#123;// 创建表</span><br><span class="line">$table -&gt; increment(&apos;id&apos;);</span><br><span class="line">$table -&gt; string(&apos;title&apos;,100) -&gt; default(&apos;&apos;);</span><br><span class="line">$table -&gt; text(&apos;content&apos;);</span><br><span class="line">$table -&gt; integer(&apos;user_id&apos;) -&gt; default(0);</span><br><span class="line">$table -&gt; timestamps();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">public function down()&#123;</span><br><span class="line">Scheme::dropIfExists(&apos;posts&apos;);// 删除表</span><br><span class="line">&#125;</span><br><span class="line">// 如果报错 SQL max key length 767 bytes，就需要在 app\Providers 文件的boot() 方法中添加 一下代码</span><br><span class="line">public function boot()&#123;</span><br><span class="line">Schema::defaultStringLength(191);// 191 = 797 / 4 </span><br><span class="line">&#125;</span><br><span class="line">php artisan migrate// 完成数据表的迁移</span><br><span class="line">数据库的回滚</span><br><span class="line">php artisan migrate:rollback</span><br></pre></td></tr></table></figure><h4 id="表名-posts"><a href="#表名-posts" class="headerlink" title="表名 posts"></a>表名 posts</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ORM:</span><br><span class="line">创建posts 的模型:</span><br><span class="line">php artisan make:model Post</span><br><span class="line"></span><br><span class="line">tinker 的使用:</span><br><span class="line">php artisan think</span><br><span class="line">基本的增删改查</span><br><span class="line">增加:</span><br><span class="line">$post = new \App\Post();</span><br><span class="line">$post -&gt; title = &apos;title text&apos;;</span><br><span class="line">$post -&gt; content = &apos;content text&apos;;</span><br><span class="line">$post -&gt; save();</span><br><span class="line">查找：</span><br><span class="line">\App\Post::find(3);</span><br><span class="line">\App\Post::where(&apos;title&apos;,&apos;titel text&apos;) -&gt; get() | -&gt; first();</span><br><span class="line">更新：</span><br><span class="line">$post = \App\Post::find(3);</span><br><span class="line">$post -&gt; title = &apos;new title text&apos;;</span><br><span class="line">删除:</span><br><span class="line">$post = \App\Post::find(3);</span><br><span class="line">$post -&gt; delete();</span><br></pre></td></tr></table></figure><h3 id="文章列表逻辑"><a href="#文章列表逻辑" class="headerlink" title="文章列表逻辑"></a>文章列表逻辑</h3><h4 id="模型查找-页面渲染-时间格式-数据填充-字符截断-分页"><a href="#模型查找-页面渲染-时间格式-数据填充-字符截断-分页" class="headerlink" title="模型查找  页面渲染  时间格式   数据填充   字符截断    分页"></a>模型查找  页面渲染  时间格式   数据填充   字符截断    分页</h4><p>在列表控制器中实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PostController.php</span><br><span class="line">use \App\Post;</span><br><span class="line">public function index()&#123;</span><br><span class="line">$posts = Post::orderBy(&apos;created_at&apos;,&apos;desc&apos;) -&gt; get();// 模型查找</span><br><span class="line">return view(&apos;posts/index&apos;,compact(&apos;posts&apos;));// 页面渲染</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">接着在模板中修改页面渲染：</span><br><span class="line">如果传递过来的是数组：</span><br><span class="line">@foreach($arrs as $arr)</span><br><span class="line">&#123;&#123;$arr[&apos;title&apos;]&#125;&#125;</span><br><span class="line">@endforeach</span><br><span class="line">如果传递过来的是对象</span><br><span class="line">@foreach($posts as $post)</span><br><span class="line">&#123;&#123;$post -&gt; title&#125;&#125;//post 的 title 属性和其他属性</span><br><span class="line">&#123;&#123;$post -&gt; created_at&#125;&#125; | &#123;&#123;$pos -&gt; id&#125;&#125; | &#123;&#123;$post -&gt; content&#125;&#125; | &#123;&#123;$post -&gt; updated_at&#125;&#125;</span><br><span class="line">@endforeach</span><br><span class="line"></span><br><span class="line">时间格式渲染：</span><br><span class="line">&#123;&#123;$post -&gt; created_at -&gt; toFormattedDateString()&#125;&#125;// 格式化时间</span><br><span class="line"></span><br><span class="line">数据填充：</span><br><span class="line">在 database\factories\ModelFactory.php 文件中设置以下代码</span><br><span class="line">$factory -&gt; define(App\Post::class,function(Faker\Generator $faker)&#123;</span><br><span class="line">return [</span><br><span class="line">&apos;title&apos; =&gt; $faker -&gt; sentence(6);// 6个单词</span><br><span class="line">&apos;content&apos; =&gt; $faker -&gt; paragraph(10);// 10个句子</span><br><span class="line">];</span><br><span class="line">&#125;);</span><br><span class="line">php artisan tinker</span><br><span class="line">: factory(App\Post::class,20) -&gt; create();//生成  make-&gt; (); //演示</span><br><span class="line"></span><br><span class="line">分页：</span><br><span class="line">控制器PostController  index() </span><br><span class="line">$posts = Post::orderBy(&apos;created_at&apos;,&apos;desc&apos;) -&gt; paginate(n);// n 一个页面显示的数量</span><br><span class="line">模板 view/post/index.blade.php</span><br><span class="line">&#123;&#123;$posts -&gt; links()&#125;&#125;</span><br><span class="line"></span><br><span class="line">字符截取：</span><br><span class="line">&#123;&#123;str__limit($post -&gt; content,&apos;100&apos;,&apos;...&apos;)&#125;&#125;    // str__limit() 100：显示的数量 ... 显示文本</span><br></pre></td></tr></table></figure><h3 id="文章添加逻辑"><a href="#文章添加逻辑" class="headerlink" title="文章添加逻辑"></a>文章添加逻辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">控制器</span><br><span class="line">模板 form 中传递的参数名和数据库字段名保持一致</span><br><span class="line">文章列表  详情页面  创建页面  创建逻辑  编辑页面 编辑逻辑</span><br><span class="line">控制器对应的方法中在接收传递数据的内容调试时使用 dd(\Request::all()); == dd(request()); // dd(request(&apos;title&apos;));     dd = dump and die </span><br><span class="line"></span><br><span class="line">CSRF</span><br><span class="line">在模板页面需要设置 csrf_token() 字段</span><br><span class="line">&lt;input type=&apos;hidden&apos; name=&apos;_token&apos; value=&quot;&#123;&#123;csrf_token()&#125;&#125;&quot;&gt;  == &#123;&#123;csrf_field()&#125;&#125;</span><br><span class="line"></span><br><span class="line">保存model</span><br><span class="line">1. 第一种方式</span><br><span class="line">$post = new Post();</span><br><span class="line">$post -&gt; title = request(&apos;title&apos;);// 通过request 获取title数据</span><br><span class="line">$post -&gt; content = request(&apos;content&apos;);// 通过request 获取content数据</span><br><span class="line">$post -&gt; save();// 通过 save() 进行保存</span><br><span class="line">2. 第二种方式</span><br><span class="line">$params = [&apos;title&apos; =&gt; request(&apos;title&apos;), &apos;content&apos; =&gt; request(&apos;content&apos;)];</span><br><span class="line">Post::create($params);</span><br><span class="line">3. 第三种方式是第二种方式的简写</span><br><span class="line">Post::create(request([&apos;title&apos;,&apos;content&apos;]))；</span><br><span class="line">如果报错，create方法需要在模型中设置相对应的规则</span><br><span class="line">app/Post.php</span><br><span class="line">class Post extends Model&#123;</span><br><span class="line">protected $guarded = [];// 不可以注入数据的字段为空的话，所有数据都可以注入</span><br><span class="line">protected $fillable = [&apos;title&apos;,&apos;content&apos;];// 可以注入数据的字段</span><br><span class="line">&#125;</span><br><span class="line">此处可以把$guarded $fillable 提取到新的model 类文件中, post.php 集成新的model类就可以简写很多代码</span><br><span class="line"></span><br><span class="line">验证和错误提示</span><br><span class="line">控制器做数据的验证：</span><br><span class="line">public function store()&#123;</span><br><span class="line">// 验证</span><br><span class="line">$this -&gt; validate(request()[</span><br><span class="line">&apos;title&apos; =&gt; &apos;required|string|max:100|min:5&apos;,</span><br><span class="line">&apos;content&apos; =&gt; &apos;required|string|min:10&apos;</span><br><span class="line">]);</span><br><span class="line">&#125;</span><br><span class="line">// 逻辑</span><br><span class="line">$post = Post::create(request([&apos;title&apos;,&apos;content&apos;]));</span><br><span class="line">// 渲染</span><br><span class="line">return redirect(&apos;/posts&apos;);</span><br><span class="line">视图层做错误的提示：</span><br><span class="line">@if(count($errors) &gt; 0)</span><br><span class="line">@foreach($errors as $error)</span><br><span class="line">&#123;&#123;$error&#125;&#125;</span><br><span class="line">@endforeach</span><br><span class="line">@endif</span><br><span class="line"></span><br><span class="line">错误提示本地化</span><br><span class="line">resources/lang/zh/复制 en中的文件到zh中，中文汉化放到validation.php中， 在config/app.php 中修改 locale en 为 zh</span><br></pre></td></tr></table></figure><h3 id="富文本编辑器的使用"><a href="#富文本编辑器的使用" class="headerlink" title="富文本编辑器的使用"></a>富文本编辑器的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下载wangEdit2 js 和其他的</span><br><span class="line">模板中对标签的格式化</span><br><span class="line">&#123;!! str_limit($post -&gt; content),&apos;100&apos;,&apos;...&apos; !!&#125;</span><br><span class="line">图片上传</span><br><span class="line">设置 路由</span><br><span class="line">Route::post(&apos;/posts/image/upload&apos;,&apos;\App\Http\PostController@imageUpload&apos;);</span><br><span class="line">控制器</span><br><span class="line">这一部分不是最重要的，暂时不细研究</span><br></pre></td></tr></table></figure><h4 id="文章编辑逻辑"><a href="#文章编辑逻辑" class="headerlink" title="文章编辑逻辑"></a>文章编辑逻辑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">路由：</span><br><span class="line">Route::get(&apos;/posts/&#123;post&#125;/edit&apos;,&apos;\App\Http\PostController@edit&apos;);// 传递 post 模型绑定</span><br><span class="line">控制器:</span><br><span class="line">如果路由中有传递 模型绑定，那么控制器也需要在相对应的方法中注入模型参数 </span><br><span class="line">public function edit(Post $post)&#123;</span><br><span class="line">return view(&apos;/posts/edit&apos;,compact(&apos;posts&apos;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSRF 视图层：</span><br><span class="line">&#123;&#123; method_field(&apos;PUT&apos;) &#125;&#125;// 视图层</span><br><span class="line">&#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">&#123;&#123; $posts -&gt; title &#125;&#125;//</span><br><span class="line">&#123;&#123; $posts -&gt; content &#125;&#125;</span><br><span class="line"></span><br><span class="line">更新 Model:</span><br><span class="line">路由:</span><br><span class="line">Route::put(&apos;/posts/&#123;post&#125;/&apos;,&apos;\App\Http\PostController@update&apos;);</span><br><span class="line">控制器 PostController:</span><br><span class="line">public function update(Post $post)&#123;</span><br><span class="line">// 验证</span><br><span class="line">$this -&gt; validate(requset()[</span><br><span class="line">&apos;title&apos; =&gt; &apos;required|string|max:100|min:5&apos;,</span><br><span class="line">&apos;content&apos; =&gt; &apos;required|string|min:10&apos;</span><br><span class="line">]);</span><br><span class="line">// 逻辑</span><br><span class="line">$post -&gt; title = request(&apos;title&apos;);</span><br><span class="line">$post -&gt; content = request(&apos;content&apos;);</span><br><span class="line">$post -&gt; save();</span><br><span class="line">// 渲染</span><br><span class="line">return redirect(&apos;/posts/&#123;$post -&gt; id&#125;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">视图层：</span><br><span class="line">错误提示代码提取到 layout/error.blade.php</span><br><span class="line">edit.blade.php</span><br><span class="line">@extends(&apos;layout.main&apos;)</span><br><span class="line">@section(&apos;content&apos;)</span><br><span class="line">some html code ... </span><br><span class="line">@include(&apos;layout.error&apos;)</span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line">删除文章：</span><br><span class="line">路由: </span><br><span class="line">Route::get(&apos;/posts/&#123;post&#125;&apos;,&apos;\App\Http\PostController@delete&apos;);</span><br><span class="line">控制器:</span><br><span class="line">public function delete(Post $post)&#123;</span><br><span class="line">// TODO: 用户的权限认证</span><br><span class="line">$post -&gt; delete();</span><br><span class="line">return redirect(&apos;/posts&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/categories/PHP/Laravel/"/>
    
    
      <category term="Laravel" scheme="http://yoursite.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Error</title>
    <link href="http://yoursite.com/2019/08/14/Error-Note/"/>
    <id>http://yoursite.com/2019/08/14/Error-Note/</id>
    <published>2019-08-14T15:15:56.000Z</published>
    <updated>2019-08-14T15:18:29.034Z</updated>
    
    <content type="html"><![CDATA[<center> 积累工作中常见错误</center><a id="more"></a><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><ul><li>积累错误</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; 积累工作中常见错误&lt;/center&gt;
    
    </summary>
    
      <category term="Error" scheme="http://yoursite.com/categories/Error/"/>
    
    
      <category term="Error" scheme="http://yoursite.com/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>Design</title>
    <link href="http://yoursite.com/2019/08/14/Design-Note/"/>
    <id>http://yoursite.com/2019/08/14/Design-Note/</id>
    <published>2019-08-14T15:04:45.000Z</published>
    <updated>2019-08-15T12:39:00.235Z</updated>
    
    <content type="html"><![CDATA[<center> 设计模式 </center><a id="more"></a><h3 id="TODO-设计模式"><a href="#TODO-设计模式" class="headerlink" title="TODO: 设计模式"></a>TODO: 设计模式</h3><h2 id="创造型设计模式"><a href="#创造型设计模式" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h2><ul><li>简单工厂</li><li>工厂方法</li><li>抽象工厂</li><li>构建器</li><li>原型</li><li>单例</li></ul><h2 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h2><ul><li>适配器</li><li>桥梁</li><li>组合</li><li>装饰</li><li>门面</li><li>享元</li><li>代理</li></ul><h2 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h2><ul><li>责任链</li><li>命令行</li><li>迭代器</li><li>中介者</li><li>备忘录</li><li>观察者</li><li>访问者</li><li>策略</li><li>状态</li><li>模版方法</li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>创造型        结构型        行为型    </p><h2 id="创造型设计模式-1"><a href="#创造型设计模式-1" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h2><ul><li><p>简单工厂：</p><pre><code>只是为客户端生成一个实例，而不会向客户端公开任何实例化逻辑工厂时用户创建其他对象的对象，正式工厂是一种函数或方法，它从一些方法调用返回变化的原型或类的对象，这被假定为&quot;新&quot;</code></pre><p>  程序化示例：<br>  首先，定义一个门界面和实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface Door &#123;</span><br><span class="line">public function getWidth(): float;</span><br><span class="line">public function getHeight(): float;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clas WoodenDoor implements Door &#123;</span><br><span class="line">protected $width;</span><br><span class="line">protected $height;</span><br><span class="line"></span><br><span class="line">public function __construct(float $width, float $height) &#123;</span><br><span class="line">$this -&gt; width = $width;</span><br><span class="line">$this -&gt; height = $height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getWidth(): float &#123;</span><br><span class="line">return $this -&gt; width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getHeight(): float &#123;</span><br><span class="line">return $this -&gt; height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们有我们的门工厂、门，并返回它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class DoorFactory &#123;</span><br><span class="line">public static function makeDoor($width, $height): Door &#123;</span><br><span class="line">return new WoodenDoor($width, $height);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后它可以用作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Make me a door of 300 x 300</span><br><span class="line">$door = DoorFactory::makeDoor(300,300);</span><br><span class="line"></span><br><span class="line">echo &apos;Width: &apos; . $door -&gt; getWidth();</span><br><span class="line">echo &apos;Height: &apos;. $door -&gt; getHeight();</span><br><span class="line"></span><br><span class="line">// Make me a door of 100 x 100</span><br><span class="line">$door2 = DoorFactory::makeDoor(100,100);</span><br></pre></td></tr></table></figure></li></ul><p>用处：当创建一个对象不仅仅是一些分配而且涉及一些逻辑时，将它放在专用工厂中，而不是在任何地方重复相同的代码时有意义的</p><ul><li><p>工厂方法<br>  提供了一种将实例化逻辑委托给子类的方法<br>  处理创建对象的问题，无需指定将要创建的对象的确切类。在接口中指定并由子类实现，或者在基类中实现并可选地由派生类覆盖，而不是通过调用构造函数<br>  程序化示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Interviewer &#123;</span><br><span class="line">public function askQuestions();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Developer implements Interviewer &#123;</span><br><span class="line">public function askQuestions() &#123;</span><br><span class="line">echo &apos;Factory Design Patterns &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CommunityExecutive implements Interviewer &#123;</span><br><span class="line">public function askQuestions() &#123;</span><br><span class="line">echo &apos;Asking about community building &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  创造 HiringManager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abstract class HiringManager &#123;</span><br><span class="line">// Factory method</span><br><span class="line">abstract protected function makeInterviewer(): Interviewer;</span><br><span class="line"></span><br><span class="line">public function takeInterview() &#123;</span><br><span class="line">$interviewer = $this -&gt; makeInterviewer();</span><br><span class="line">$interviewer -&gt; askQuestions();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>任何子类可以延长并提供所需的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class DevelopmentManager extends HiringManager &#123;</span><br><span class="line">protected function makeInterviewer(): Interviewer &#123;</span><br><span class="line">return new Developer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MarketingManager extends HiringManager &#123;</span><br><span class="line">protected function makeInterviewer(): Interviewer &#123;</span><br><span class="line">return new CommunityExecutive();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$devManager = new DevelopmentManager();</span><br><span class="line">$devManager -&gt; takeInterview();// Output: Asking about design patterns </span><br><span class="line"></span><br><span class="line">$marketingManager = new MarketingManager();</span><br><span class="line">$marketingManager -&gt; takeInterview();// Output : Asking about community building</span><br></pre></td></tr></table></figure><p>用处：<br>    在类中有一些通用处理但在运行时动态决定所需的子类时用，当客户端不知道他需要什么样子的子类时</p><ul><li>抽象工厂<br>  将个人 相关\依赖工厂组在一起而不指定其具体类别的工厂<br>  提供了一种封装一组具有共同主题但没有指定具体类的单个工厂的方法<br>  程序化示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Door &#123;</span><br><span class="line">public function getDescription();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WooderDoor implements Door &#123;</span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">echo &apos;I am a wooden door&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class IronDoor implements Door &#123;</span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">echo &apos;I am an iron door&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>为每种门类型都配备一些装配专家</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface DoorFittingExpert &#123;</span><br><span class="line">public function getDescription();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Weler implements DoorFittingExpert &#123;</span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">echo &apos;i can only fit iron doors &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Carpenter implements DoorFittingExpert &#123;</span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">echo &apos;I can only fit wooden doors &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有抽象工厂，制作相关对象的家庭，即木门工厂将创建一个木门和木门配件，门专家</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">interface DoorFactory &#123;</span><br><span class="line">public function makeDoor(): Door;</span><br><span class="line">public function makeFittingExpert(): DoorFittingExpert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Wooden factory to return carpenter and wooden door </span><br><span class="line">class WoodenDoorFactory implements DoorFactory &#123;</span><br><span class="line">public function makeDoor(): Door &#123;</span><br><span class="line">return new WoodenDoor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function makeFittingExpert(): DoorFittingExpert &#123;</span><br><span class="line">return new Carpenter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Iron Door factory to get iron door and the relevant fitting expert </span><br><span class="line">class IronDoorFactory implements DoorFactory &#123;</span><br><span class="line">public function makeDoor(): Door &#123;</span><br><span class="line">return new IronDoor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function makeFittingExpert(): DoorFittingExpert &#123;</span><br><span class="line">return new Welder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Iron d</span><br></pre></td></tr></table></figure><p>可用作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$woodenFactory = new WoodenDoorFactory();</span><br><span class="line"></span><br><span class="line">$door = $woodenFactory -&gt; makeDoor();</span><br><span class="line">$expert = $woodenFactory -&gt; makeFittingExpert();</span><br><span class="line"></span><br><span class="line">$door -&gt; getDescription(); // Output: i am a wooden door</span><br><span class="line">$expert -&gt; getDescription();</span><br><span class="line"></span><br><span class="line">// Same for Iron Factory </span><br><span class="line">$ironFactory = new IronDoorFactory();</span><br><span class="line"></span><br><span class="line">$door = $ironFactory -&gt; makeDoor();</span><br><span class="line">$expert = $ironFactory -&gt; makeFittingExpert();</span><br><span class="line"></span><br><span class="line">$door -&gt; getDescription();</span><br><span class="line">$expert -&gt; getDescription();</span><br></pre></td></tr></table></figure><p>木门工厂疯转 各种函数<br>用法： 当存在互相关联的依赖关系时，涉及非简单的创建逻辑</p><ul><li>构建器<br>  允许创建不同风格的对象，同时避免构造函数污染，当有几种风格的物体时很有用，或在创建对象时设计很多步骤<br>  目的：找到伸缩构造器反模式的解决方案<br>  程序化示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Burger &#123;</span><br><span class="line">protected $size;</span><br><span class="line"></span><br><span class="line">protected $cheese = false;</span><br><span class="line">protected $pepperoni = false;</span><br><span class="line">protected $lettuce = false;</span><br><span class="line">protected $tomato = false;</span><br><span class="line"></span><br><span class="line">public function __construct(BurgerBuilder $builder) &#123;</span><br><span class="line">$this -&gt; size = $builder -&gt; size;</span><br><span class="line">$this -&gt; cheese = $builder -&gt; cheese;</span><br><span class="line">$this -&gt; pepperoni = $builder -&gt; pepperoni;</span><br><span class="line">$this -&gt; lettuce = $builder -&gt; lettuce;</span><br><span class="line">$this -&gt; tomato = $builder -&gt; tomato;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后有建设者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class BurgerBuilder &#123;</span><br><span class="line">public $size;</span><br><span class="line"></span><br><span class="line">public $cheese = false;</span><br><span class="line">public $pepperoni = false;</span><br><span class="line">public $lettuce = false;</span><br><span class="line">public $tomato = false;</span><br><span class="line"></span><br><span class="line">public function __construct(int $size) &#123;</span><br><span class="line">$this -&gt; size = $size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function addPepperoni() &#123;</span><br><span class="line">$this -&gt; pepperoni = true;</span><br><span class="line">return $this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function addLettuce() &#123;</span><br><span class="line">$this -&gt; lettuce = true;</span><br><span class="line">return $this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function addCheese() &#123;</span><br><span class="line">$this -&gt; cheese = true;</span><br><span class="line">return $this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function addTomato() &#123;</span><br><span class="line">$this -&gt; tomato = true;</span><br><span class="line">return $this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function build(): Burger &#123;</span><br><span class="line">return new Burger($this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$burger = (new BurgerBuilder(14)) </span><br><span class="line">-&gt; addPepperoni()</span><br><span class="line">-&gt; addLettuce()</span><br><span class="line">-&gt; addTomato()</span><br><span class="line">-&gt; build();</span><br></pre></td></tr></table></figure><p>用处：<br>    当可能存在几种类型的对象并避免构造函数伸缩时，与工厂模式区别在于：当创建时一步过程时，将使用工厂模式，而当创建是多步骤过程时，将使用构造器模式</p><ul><li>原型<br>  通过克隆基于现有对象创建对象, 允许创建现有对象的副本并进行修改，而不是从头开始创建对象并进行设置<br>  程序化示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Sheep &#123;</span><br><span class="line">protected $name;</span><br><span class="line">protected $category;</span><br><span class="line"></span><br><span class="line">public function __construct(string $name, string $category = &apos;Mountain Sheep&apos;) &#123;</span><br><span class="line">$this -&gt; name = $name;</span><br><span class="line">$this -&gt; category = $category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function setName(string $name) &#123;</span><br><span class="line">$this -&gt; name = $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getName() &#123;</span><br><span class="line">return $this -&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function setCategory(string $category) &#123;</span><br><span class="line">$this -&gt; category = $category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getCategory() &#123;</span><br><span class="line">return $this -&gt; category;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$original = new Sheep(&apos;Hale&apos;);</span><br><span class="line">echo $original -&gt; getName(); // Hale</span><br><span class="line">echo $original -&gt; getCategory() // Mountain Sheep</span><br><span class="line"></span><br><span class="line">// Clone and Modify what is required</span><br><span class="line">$cloned = clone $original;</span><br><span class="line">$cloned -&gt; setName(&apos;Lv&apos;);</span><br><span class="line">echo $cloned -&gt; getName(); // Lv</span><br><span class="line">echo $cloned -&gt; getCategory();// Mountain Sheep</span><br></pre></td></tr></table></figure><p>可用魔术方法 __clone() 来修改克隆方法<br>用处： 当需要一个与现有对象类似的对象时，或者与克隆相比，创建的成本会很高</p><ul><li>单例<br>  确保只创建特定类的一个对象<br>  程序化示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">final Class President &#123;</span><br><span class="line">private static $instance;</span><br><span class="line"></span><br><span class="line">private function __construct() &#123;</span><br><span class="line">// Hide the constructor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static function getInstance(): President &#123;</span><br><span class="line">if(!self::$instance) &#123;</span><br><span class="line">self::$instance = new self();</span><br><span class="line">&#125;</span><br><span class="line">return self::$instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private function __clone() &#123;</span><br><span class="line">// Disable cloning</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private function __wakeup() &#123;</span><br><span class="line">// Disable unserialize</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$president1 = President::getInstance();</span><br><span class="line">$president2 = President::getInstance();</span><br><span class="line"></span><br><span class="line">var_dump($president1 === $president2);// true</span><br></pre></td></tr></table></figure><h3 id="结构型设计模式-1"><a href="#结构型设计模式-1" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h3><p>适配器     桥梁     组合     装饰     门面     享元     代理</p><p>适配器：<br>    在适配器中包装其他不兼容的对象，以使其与另一个类兼容。 允许将现有类的接口用作另一个接口，通常用于使现有类与其他类一起工作而无需修改其源代码<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Lion &#123;</span><br><span class="line">public function roar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AfricanLion implements Lion &#123;</span><br><span class="line">public function roar()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AsianLion implements Lion &#123;</span><br><span class="line">public function roar()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现任何Lion接口可以进行搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Hunter &#123;</span><br><span class="line">public function hunt(Lion $lion) &#123;</span><br><span class="line">$lion -&gt; roar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Wilddog &#123;</span><br><span class="line">public function bark() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Adapter around wild dog to make it compatible with our game </span><br><span class="line">class WildDogAdapter implements Lion &#123;</span><br><span class="line">protected $dog;</span><br><span class="line">public function __construct(WildDog $dog) &#123;</span><br><span class="line">$this -&gt; dog = $dog;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$wildDog = new WildDog();</span><br><span class="line">$wildDogAdapter = new WildDogAdapter($wildDog);</span><br><span class="line"></span><br><span class="line">$hunter = new Hunter();</span><br><span class="line">$hunter -&gt; hunt($wildDogAdapter);</span><br></pre></td></tr></table></figure><p>桥梁模式<br>    优先于集成的组合,实现细节从层次结构推送到具有单独层次结构的另一个对象<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">interface WebPage &#123;</span><br><span class="line">public function __construct(Theme $theme);</span><br><span class="line">public function getContent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class About implements WebPage &#123;</span><br><span class="line">protected $theme;</span><br><span class="line"></span><br><span class="line">public function __construct(Theme $theme) &#123;</span><br><span class="line">$this -&gt; theme = $theme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getContent() &#123;</span><br><span class="line">return &apos;About page in&apos; . $this -&gt; theme -&gt; getColor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Careers implements WebPage &#123;</span><br><span class="line">protected $theme;</span><br><span class="line"></span><br><span class="line">public function __construct(Theme $theme) &#123;</span><br><span class="line">$this -&gt; theme = $theme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getContent() &#123;</span><br><span class="line">return &apos;Careers page in &apos; . $this -&gt; theme -&gt; getColor();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">interface Theme &#123;</span><br><span class="line">public function getColor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DarkTheme implements Theme &#123;</span><br><span class="line">public function getColor() &#123;</span><br><span class="line">return &apos;Dark Black&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LightTheme implements Theme &#123;</span><br><span class="line">public function getColor() &#123;</span><br><span class="line">return &apos;Off white&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AquaTheme implements Theme &#123;</span><br><span class="line">public function getColor() &#123;</span><br><span class="line">return &apos;Light theme&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$darkTheme = new DarkTheme();</span><br><span class="line"></span><br><span class="line">$about = new About($darkTheme);</span><br><span class="line">$careers = new Careers($darkTheme);</span><br><span class="line"></span><br><span class="line">echo $about -&gt; getContent(); // about page in dark black</span><br><span class="line">echo $careers -&gt; getContent();//Careers page in Dark Black</span><br></pre></td></tr></table></figure><p>组合模式<br>    复合模式允许客户以统一的方式处理单个对象<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">interface Employee &#123;</span><br><span class="line">public function __construct(string $name , float $salary);</span><br><span class="line">public function getName(): string;</span><br><span class="line">public function setSalary(float $salary);</span><br><span class="line">public function getSalary(): flaot;</span><br><span class="line">public function getRoles(): array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Developer implements Employee &#123;</span><br><span class="line">protected $salary;</span><br><span class="line">protected $name;</span><br><span class="line">protected $roles;</span><br><span class="line"></span><br><span class="line">public function __construct(string $name, float $salary) &#123;</span><br><span class="line">$this -&gt; name = $name;</span><br><span class="line">$this -&gt; salary = $salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getName(): string &#123;</span><br><span class="line">return $this -&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function setSalary(float $salary) &#123;</span><br><span class="line">$this -&gt; salary = $salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getSalary(): float &#123;</span><br><span class="line">return $this -&gt; salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getRoles(): array &#123;</span><br><span class="line">return $this -&gt; roles;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Organization &#123;</span><br><span class="line">protected $employees;</span><br><span class="line"></span><br><span class="line">public function addEmployee(Employee $employee) &#123;</span><br><span class="line">$this -&gt; employees[] = $employee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getNetSalaries(): float &#123;</span><br><span class="line">$netSalary = 0;</span><br><span class="line"></span><br><span class="line">foreach($this -&gt; employees as $emploess) &#123;</span><br><span class="line">$netSalary += $employee -&gt; getSalary();</span><br><span class="line">&#125;</span><br><span class="line">return $netSalary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$john = new Developer(&apos;John Doe&apos;, 12000);</span><br><span class="line">$hale = new Designer(&apos;Hale Lv&apos;, 15000);</span><br><span class="line"></span><br><span class="line">// Add them to organization()</span><br><span class="line">$organization = new Organization();</span><br><span class="line">$organization -&gt; addEmployee($john);</span><br><span class="line">$organization -&gt; addEmployee($hale);</span><br><span class="line"></span><br><span class="line">echo &apos;Net Salaries: &apos; . $organization -&gt; getNetSalaries();// Net Salaries : 27000</span><br></pre></td></tr></table></figure><p>装饰模式<br>    通过将对象包装在装饰器类的对象中来动态更改对象在运动时的行为<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface Coffee &#123;</span><br><span class="line">public function getCost();</span><br><span class="line">public function getDescription();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SimpleCoffee implements Coffee  &#123;</span><br><span class="line">public function getCost() &#123;</span><br><span class="line">return 10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">return &apos;Simple Coffee&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class MilkCoffee implements Coffee &#123;</span><br><span class="line">protected $coffee;</span><br><span class="line"></span><br><span class="line">public function __constrcut(Coffee $coffee) &#123;</span><br><span class="line">$this -&gt; coffee = $coffee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getCost() &#123;</span><br><span class="line">return $this -&gt; coffee -&gt; getCost + 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">return $this -&gt; coffee -&gt; getDescription() . &apos; Milk &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class WhipCoffee implements Coffee &#123;</span><br><span class="line">protected $coffee;</span><br><span class="line"></span><br><span class="line">public function __construct(Coffee $coffee) &#123;</span><br><span class="line">$this -&gt; coffee = $coffee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getCost() &#123;</span><br><span class="line">return $this -&gt; coffee -&gt; getCost() + 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">return $this -&gt; coffee -&gt; getDescription() . &apos;whip&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VanlillaCoffee implements Coffee &#123;</span><br><span class="line">protected $coffee;</span><br><span class="line"></span><br><span class="line">public function __constrcut(Coffee $coffee) &#123;</span><br><span class="line">$this -&gt; coffee = $coffee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getCost() &#123;</span><br><span class="line">return $this -&gt; coffee = getCost() + 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getDescription() &#123;</span><br><span class="line">return $this -. coffee -&gt; getDescription(). &apos; Valilla&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$someCoffee = new SimpleCoffee();</span><br><span class="line">echo $someCoffee -&gt; getCost(); </span><br><span class="line">echo $someCoffee -&gt; getDescription();</span><br><span class="line"></span><br><span class="line">$someCoffee = new MilkCoffee($someCoffee);</span><br><span class="line">echo $someCoffee -&gt; getCost();</span><br><span class="line">echo $someCoffee -&gt; getDescription();</span><br><span class="line"></span><br><span class="line">$someCoffee = new WhipCoffee($someCoffee);</span><br><span class="line">echo $someCoffee -&gt; getCost();</span><br><span class="line">echo $someCoffee -&gt; getDescription();</span><br><span class="line"></span><br><span class="line">$someCoffee = new VanillaCoffee($someCoffee);</span><br><span class="line">echo $someCoffee -&gt; getCost();</span><br><span class="line">echo $someCoffee -&gt; getDescription();</span><br></pre></td></tr></table></figure><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><pre><code>Facade 模式为复杂的子系统提供了简化的界面外观是一个对象，它为更大的代码提供了简化的接口，如类库程序化示例</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Computer &#123;</span><br><span class="line">public function getElectricShock() &#123;</span><br><span class="line">echo &apos;CDB&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function makeSound() &#123;</span><br><span class="line">echo &apos;Liunx&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function showLoadingScreen() &#123;</span><br><span class="line">echo &apos;Loding ... &apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function bam() &#123;</span><br><span class="line">echo &apos;Ready to be used !&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function closeEverything() &#123;</span><br><span class="line">echo &apos;Biu biu biu ... !&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function sooth() &#123;</span><br><span class="line">echo &apos;zzzzz&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function pullCurrent() &#123;</span><br><span class="line">echo &apos;Hahaha!&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class ComputerFacade &#123;</span><br><span class="line">protected $computer;</span><br><span class="line"></span><br><span class="line">pulic function __construct(Computer $computer) &#123;</span><br><span class="line">$this -&gt; computer = $computer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function turnOn() &#123;</span><br><span class="line">$this -&gt; computer -&gt; getElectricShock();</span><br><span class="line">$this -&gt; computer -&gt; makeSound();</span><br><span class="line">$this -&gt; computer -&gt; showLoadingScreen();</span><br><span class="line">$this -&gt; computer -&gt; bam();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function turnOff() &#123;</span><br><span class="line">$this -&gt; computer -&gt; closeEverything();</span><br><span class="line">$this -&gt; computer -&gt; pullCurrent();</span><br><span class="line">$this -&gt; computer -&gt; sooth();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$computer = new ComputerFacade(new Computer());</span><br><span class="line">$computer -&gt; turnOn();</span><br><span class="line">$computer -&gt; turnOff();</span><br></pre></td></tr></table></figure><p>享元模式<br>    通过尽可能多地与类似对象共享来最小化内存使用或计算开销<br>    程序示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class KarakTea &#123;&#125;</span><br><span class="line"></span><br><span class="line">class TeaMaker &#123;</span><br><span class="line">protected $availableTea = [];</span><br><span class="line"></span><br><span class="line">public function make($preference) &#123;</span><br><span class="line">if(empty($this -&gt; availableTea[$preference])) &#123;</span><br><span class="line">$this -&gt; availableTea[$preference] = new KarakTea();</span><br><span class="line">&#125;</span><br><span class="line">return $this -&gt; availableTea[$preference];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class TeaShop &#123;</span><br><span class="line">protected $orders;</span><br><span class="line">protected $teaMaker;</span><br><span class="line"></span><br><span class="line">public function __construct(TeaMaker $teaMaker) &#123;</span><br><span class="line">$this -&gt; teaMaker = $teaMaker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function takeOrder(string $teaType, int $table) &#123;</span><br><span class="line">$this -&gt; orders[$table] = $this -&gt; teaMaker -&gt; make(teaType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function serve() &#123;</span><br><span class="line">foreach($this -&gt; orders as $table =&gt; $tea) &#123;</span><br><span class="line">echo &apos;Serving tea to table &apos; . $table;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$teaMaker = new TeaMaker();</span><br><span class="line">$shop = new TeaShop($teaMaker);</span><br><span class="line"></span><br><span class="line">$shop -&gt; takeOrder(&apos;Less Sugar&apos;);</span><br><span class="line">$shop -&gt; takeOrder(&apos;More Milk&apos;);</span><br><span class="line">$shop -&gt; takeOrder(&apos;Without Sugar&apos;, 5);</span><br><span class="line"></span><br><span class="line">$shop -&gt; serve();</span><br></pre></td></tr></table></figure><p>代理模式<br>    类表示另一个类的功能<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface Door &#123;</span><br><span class="line">public function open();</span><br><span class="line">public function close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LabDoor implements Door &#123;</span><br><span class="line">public function open() &#123;</span><br><span class="line">echo &apos;Opening lab door&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function close() &#123;</span><br><span class="line">echo &apos;Closing the lab door&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class SecuredDoor &#123;</span><br><span class="line">protected $door;</span><br><span class="line"></span><br><span class="line">public function __constrcut(Door $door) &#123;</span><br><span class="line">$this -&gt; door = $door;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function open($password) &#123;</span><br><span class="line">if($this -&gt; authenticate($password)) &#123;</span><br><span class="line">$this -&gt; door -&gt; open();</span><br><span class="line">&#125;else &#123;</span><br><span class="line">echo &apos;Big no! &apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function authenticate($password) &#123;</span><br><span class="line">return $password === &apos;$ecr@t&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function close() &#123;</span><br><span class="line">$this -&gt; door -&gt; close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$door = new SecureDoor(new LabDoor());</span><br><span class="line">$door -&gt; open(&apos;invalid&apos;);</span><br><span class="line"></span><br><span class="line">$door -&gt; open(&apos;$ecr@t&apos;);</span><br><span class="line">$door -&gt; close();</span><br></pre></td></tr></table></figure><h3 id="行为型设计模式-1"><a href="#行为型设计模式-1" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h3><p>责任链    命令行    迭代器    中介者    备忘录    观察者    访问者    策略    状态    模板</p><p>责任链<br>    构建一系列对象,请求从一端进入并继续从一个对象到另一个对象，直到找到合适的处理程序<br>    程序示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">abstract class Account &#123;</span><br><span class="line">protected $successor;</span><br><span class="line">protected $balance;</span><br><span class="line"></span><br><span class="line">public function setNext(Account $account) &#123;</span><br><span class="line">$this -&gt; succcessor = $account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function par(float $amountToPay) &#123;</span><br><span class="line">if($this -&gt; canPay($amountToPay)) &#123;</span><br><span class="line">echo sprintf(&apos;Paid %s using %s &apos; . PHP_EOL, $amountToPay, get_called_class());</span><br><span class="line">&#125;else if($this -&gt; successor) &#123;</span><br><span class="line">echo sprintf(&apos;Cannot pay using %s. Proceeding..&apos; .PHP_EOL, get_called_class());</span><br><span class="line">$this -&gt; successor -&gt; pay($amountToPay);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">throw new Exception(&apos;None of the accounts have enough balance&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function canPay($amount): bool &#123;</span><br><span class="line">return $this -&gt; balance &gt;= $amount;// 原文是 &gt;= ,感觉应该是 =</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bank extends Account &#123;</span><br><span class="line">protected $balance;</span><br><span class="line"></span><br><span class="line">public function __construct(float $balance) &#123;</span><br><span class="line">$this -&gt; balance = $balance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bitcoin extends Account &#123;</span><br><span class="line">protected $balance;</span><br><span class="line"></span><br><span class="line">public function __constrcut(flaot $balance) &#123;</span><br><span class="line">$this -&gt; balance = $balance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$bank = new Bank(100);</span><br><span class="line">$paypal = new Paypal(200);</span><br><span class="line">$bitcoin = new Bitcoin(300);</span><br><span class="line"></span><br><span class="line">$bank -&gt; setNext($paypal);</span><br><span class="line">$paypal -&gt; setNext($bitcoin);</span><br><span class="line"></span><br><span class="line">$bank -&gt; pay(259);</span><br></pre></td></tr></table></figure><p>命令行<br>    将操作封装在对象中，提供将客户与接收器分离的方法. 对象用于封装执行动作或稍后触发事件所需的所有信息，此信息包括方法名称，拥有该方法的对象以及方法参数的值。<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Bulb &#123;</span><br><span class="line">public function trunOn() &#123;</span><br><span class="line">echo &apos;Buld has been lit&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function turnOff() &#123;</span><br><span class="line">echo &apos;Darkness !&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">interface Command &#123;</span><br><span class="line">public function execute();</span><br><span class="line">public function undo();</span><br><span class="line">public function redo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TurnOn implements Command &#123;</span><br><span class="line">protected $bulb;</span><br><span class="line"></span><br><span class="line">public function __construct(Bulb $bulb) &#123;</span><br><span class="line">$this -&gt; bulb = $bulb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function execute() &#123;</span><br><span class="line">$this -&gt; bulb -&gt; turnOn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function undo() &#123;</span><br><span class="line">$this -&gt; bulb -&gt; turnOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function redo() &#123;</span><br><span class="line">$this -&gt; execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TurnOff implements Command &#123;</span><br><span class="line">protected $bulb;</span><br><span class="line"></span><br><span class="line">public function __constrcut(Bulb $bulb) &#123;</span><br><span class="line">$this -&gt; bulb = $bulb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function execute() &#123;</span><br><span class="line">$this -&gt; bulb -&gt; turnOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function undo() &#123;</span><br><span class="line">$this -&gt; bulb -&gt; turnOn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function redo() &#123;</span><br><span class="line">$this -&gt; execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RemoteControl &#123;</span><br><span class="line">public function submit(Command $command) &#123;</span><br><span class="line">$command -&gt; execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$bulb = new Bulb();</span><br><span class="line"></span><br><span class="line">$turnOn = new TurnOn($bulb);</span><br><span class="line">$turnOff = new TurnOff($bulb);</span><br><span class="line"></span><br><span class="line">$remote = new RemoteControl();</span><br><span class="line">$remote -&gt; submit($turnOn);</span><br><span class="line">$remote -&gt; submit($turnOff);</span><br></pre></td></tr></table></figure><p>迭代器<br>    提供了一种访问对象元素而不是暴露底层表示的方法<br>    用于遍历容器并访问容器的元素,将算法与容器分离，因算法是特定于容器，so 不能解耦<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class RadioStation &#123;</span><br><span class="line">protected $frequency;</span><br><span class="line"></span><br><span class="line">public function __construct(float $frequency) &#123;</span><br><span class="line">$this -&gt; frequency = $frequency;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getFrequency(): float &#123;</span><br><span class="line">return $this -&gt; frequency;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">use Countable;</span><br><span class="line">use Iterator;</span><br><span class="line"></span><br><span class="line">class StationList implements Countable, Iterator &#123;</span><br><span class="line">protected $stations = [];</span><br><span class="line">protected $counter = [];</span><br><span class="line"></span><br><span class="line">public function addStation(RadioStation $station) &#123;</span><br><span class="line">$this -&gt; stations[] = $station;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function removeStation(RadioStation $toRemove) &#123;</span><br><span class="line">$toRemoveFrequency = $toRemove -&gt; getFrequency();</span><br><span class="line">$this -&gt; stations = array_filter($this -&gt; stations, function(RadioStation $station) use ($toRemoveFrequency) &#123;</span><br><span class="line">return $station -&gt; getFrequency() !== $toRemoveFrequency;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function count(): int &#123;</span><br><span class="line">return count($this -&gt; stations);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function current(): RadioStation &#123;</span><br><span class="line">return $this -&gt; stations[$this -&gt; counter];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function key() &#123;</span><br><span class="line">return $this -&gt; counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function next()&#123;</span><br><span class="line">$this -&gt; counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function rewind() &#123;</span><br><span class="line">$this -&gt; counter = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function valid(): bool &#123;</span><br><span class="line">return isset($this -&gt; stations[$this -&gt; counter]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$stationList = new StationList();</span><br><span class="line"></span><br><span class="line">$stationList -&gt; addStation(new RadioStation(89));</span><br><span class="line">$stationList -&gt; addStation(new RadioStation(90));</span><br><span class="line">$stationList -&gt; addStation(new RadioStation(100));</span><br><span class="line">$stationList -&gt; addStation(new RadioStation(120.3));</span><br><span class="line"></span><br><span class="line">foreach($stationList as $station) &#123;</span><br><span class="line">echo $station -&gt; getFrequency() . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$stationList -&gt; removeStation(new RadioStation(89));</span><br></pre></td></tr></table></figure><p>中介者<br>    添加第三方对象控制两个对象之间的交互,减少彼此通信的类之间的耦合，不需要了解彼此的实施。 中介模式定义了一个对象，该对象封装了一组对象的交互方式，可以改变程序的运行行为。<br>    程序化示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface ChatRoomMediator &#123;</span><br><span class="line">public function showMessage(User $user, string $message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CharRoom implements CharRoomMediator &#123;</span><br><span class="line">public function showMessage(User $user, string $message) &#123;</span><br><span class="line">$time = date(&apos;M d, y H:i&apos;);</span><br><span class="line">$sender = $user -&gt; getName();</span><br><span class="line"></span><br><span class="line">echo $time . &apos;[&apos; . $sender .&apos;]:&apos; . $message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">protected $name;</span><br><span class="line">protected $charMediator;</span><br><span class="line"></span><br><span class="line">public function __constrcut(string $name, ChatRoomMediator $chatMediator) &#123;</span><br><span class="line">$this -&gt; name = $name;</span><br><span class="line">$this -&gt; chatMediator = $chatMediator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function getName() &#123;</span><br><span class="line">return $this -&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function send($message) &#123;</span><br><span class="line">$this -&gt; chatMediator -&gt; showMessage($this, $message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$mediator = new ChatRoom();</span><br><span class="line"></span><br><span class="line">$hale = new User(&apos;Hale Lv &apos;, $mediator);</span><br><span class="line">$judy = new User(&apos;Judy &apos;, $mediator);</span><br><span class="line"></span><br><span class="line">$hale -&gt; send(&apos;Hi there!&apos;);</span><br><span class="line">$judy -&gt; send(&apos;Hey!!!&apos;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; 设计模式 &lt;/center&gt;
    
    </summary>
    
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL</title>
    <link href="http://yoursite.com/2019/08/11/NoSQL-Note/"/>
    <id>http://yoursite.com/2019/08/11/NoSQL-Note/</id>
    <published>2019-08-11T05:05:07.000Z</published>
    <updated>2019-08-11T06:36:42.943Z</updated>
    
    <content type="html"><![CDATA[<center> NoSQL </center><a id="more"></a><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><p>Redis</p><p>Memcached</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; NoSQL &lt;/center&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/NoSQL/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/NoSQL/Redis/"/>
    
      <category term="Memcached" scheme="http://yoursite.com/categories/NoSQL/Redis/Memcached/"/>
    
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://yoursite.com/2019/08/11/MySQL-Note/"/>
    <id>http://yoursite.com/2019/08/11/MySQL-Note/</id>
    <published>2019-08-11T05:00:23.000Z</published>
    <updated>2019-08-16T13:58:24.954Z</updated>
    
    <content type="html"><![CDATA[<center> MySQL </center><a id="more"></a><h3 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h3><p>基本语法<br>常见用法<br>集群<br>缓存<br>主从复制<br>双主热备<br>分库分表<br>分布式架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">创建表：</span><br><span class="line">create table tb [if not exists] _name(</span><br><span class="line">`id` int(10) auto_incrementl,</span><br><span class="line">`name` varchar(20) not null default &apos;&apos;,</span><br><span class="line">`user_id` int(10) default 1,</span><br><span class="line">`salary` float unique,</span><br><span class="line">`create_at` time,</span><br><span class="line">primary key(id,user_id),</span><br><span class="line">contraint fk_name foreign key (field) references other_tb(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">主键约束： primary key</span><br><span class="line">外键约束： foreign key</span><br><span class="line">非空约束： not null</span><br><span class="line">唯一性约束：unique</span><br><span class="line">默认约束：default value</span><br><span class="line">自动增加： auto__increment</span><br><span class="line"></span><br><span class="line">查看表：</span><br><span class="line">describe</span><br><span class="line">describe tb_name / desc tb_name;</span><br><span class="line"></span><br><span class="line">查看表结构：</span><br><span class="line">show create table tb_name \G</span><br><span class="line"></span><br><span class="line">查看警告信息：</span><br><span class="line">show warnings;</span><br><span class="line"></span><br><span class="line">修改数据表: </span><br><span class="line"></span><br><span class="line">修改表名：</span><br><span class="line">alter table tb_oldName rename tb_newName;</span><br><span class="line"></span><br><span class="line">修改自增ID值</span><br><span class="line">alter table tb_name auto_increment = 1</span><br><span class="line"></span><br><span class="line">修改字段的数据类型：</span><br><span class="line">alter table tb_name modify id int(11);</span><br><span class="line"></span><br><span class="line">修改字段名：</span><br><span class="line">alter table tb_name change tb_old_field  tb_new_field int(10);</span><br><span class="line"></span><br><span class="line">添加字段：</span><br><span class="line">alter table tb_7 add name varchar(100) [first|after id];</span><br><span class="line"></span><br><span class="line">删除字段：</span><br><span class="line">alter table tb_7 drop fieldName;</span><br><span class="line"></span><br><span class="line">修改字段的排列位置：</span><br><span class="line">alter table tb_7 modify name varchar(30) [first|after] id;</span><br><span class="line"></span><br><span class="line">修改表的存储引擎：</span><br><span class="line">alter table tb_7 engine = myisam;</span><br><span class="line"></span><br><span class="line">删除表的外键约束：</span><br><span class="line">alter table tb_7 drop foreign key FK_Name;</span><br><span class="line"></span><br><span class="line">删除数据表:</span><br><span class="line">drop table [if exists] tb_name;</span><br><span class="line"></span><br><span class="line">删除没有被关联的表:</span><br><span class="line">drop table tb_name;</span><br><span class="line">删除被其他表关联的表的主表：</span><br><span class="line">全部删除：删除会破坏表的参照完整性，先删除与之关联的子表，再删除父表，这样会删除两个表中的数据。</span><br><span class="line">单独删除：如果保存子表，只需将关联表的外键约束条件取消，然后删除父表</span><br><span class="line"></span><br><span class="line">alter table tb_name drop foreign key FK_Name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">数据类型:</span><br><span class="line">整数类型:</span><br><span class="line">tinyintsmallintmediumintint(integer)bigint</span><br><span class="line"></span><br><span class="line">浮点类型:</span><br><span class="line">浮点类型：floatdouble</span><br><span class="line">定点类型：decimal</span><br><span class="line"></span><br><span class="line">字符串类型：</span><br><span class="line">charvarcharbinaryvarbinaryblobtextenumset</span><br><span class="line"></span><br><span class="line">二进制类型：</span><br><span class="line">bitbinaryvarbinarytinyblobblobmediumbloblongblob</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运算符：</span><br><span class="line">算数运算：</span><br><span class="line">+- * /</span><br><span class="line">比较运算:结果为 0，1 或者 null</span><br><span class="line">=&lt;=&gt;  &lt;&gt;(!=)&lt;= &gt;=   &gt;is nullit not null</span><br><span class="line">least  greatestbetweenandisnullinnot in  </span><br><span class="line">likeregexp</span><br><span class="line">逻辑运算：</span><br><span class="line">falsenull</span><br><span class="line">notnull </span><br><span class="line">and&amp;&amp;</span><br><span class="line">or|| </span><br><span class="line">xor</span><br><span class="line">位操作运算：</span><br><span class="line">|&amp;异或：^&lt;&lt;&gt;&gt;取反：~</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">函数：</span><br><span class="line"></span><br><span class="line">数学函数：</span><br><span class="line">绝对值函数： abc()</span><br><span class="line">平方根函数|求余函数： mod(x,y)</span><br><span class="line">获取整数函数： ceil(x), ceiling(x) , floor(x)</span><br><span class="line">随机整数函数： rand()rand(x)</span><br><span class="line">四舍五入函数： round(x), round(x,y), truncate(x,y)</span><br><span class="line">符号函数：sign(x)</span><br><span class="line">幂运算函数： pow(x,y), power(x,y), exp(x)</span><br><span class="line">对数运算函数： log(x) , log10(x)</span><br><span class="line">角度与弧度相互转换的函数： radians(x), degrees(x)</span><br><span class="line">正弦函数： sin(x)， 反弦函数: asin(x)</span><br><span class="line">余弦函数： cos(x),  反余弦函数： acos(x)</span><br><span class="line">正切函数、反正切函数、余切函数</span><br><span class="line"></span><br><span class="line">字符串函数：</span><br><span class="line">计算长度的函数： length(), char_length()</span><br><span class="line">合并字符串的函数： concat(str,str1...),concat_ws(str,str1...)</span><br><span class="line">替换字符串的函数： insert(str1, x ,len,str2)</span><br><span class="line">大小写转换函数： lower(),upper()</span><br><span class="line">获取指定长度的字符串的函数： left(s,n), right(s,n)</span><br><span class="line">填充字符串的函数： lpad(str1,len,str2), rpad(str1,len,str2)</span><br><span class="line">删除空格的函数： ltrim(s), rtrim(s), trim(s)</span><br><span class="line">删除指定字符串的函数： trim(str1 from s)</span><br><span class="line">重复生成字符串的函数： repeat(s,n)</span><br><span class="line">比较字符串大小的函数：strcmp(str,str1)</span><br><span class="line">获取字串的函数： substring(s,n,len),mid(s,n,len)</span><br><span class="line">匹配字串开始位置的函数： locate(&apos;s&apos;,&apos;str&apos;); position(&apos;s&apos; in &apos;str&apos;); instr(&apos;str&apos;,&apos;s&apos;);</span><br><span class="line">字符串逆序的函数： reverse(s)</span><br><span class="line">返回指定位置的字符串的函数：</span><br><span class="line">返回指定字符串位置的函数： field(s,s1,s2)</span><br><span class="line">返回字串位置的函数： find_in_set(s1,s2)</span><br><span class="line">选取字符串的函数： make_set(x,s1,s2...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">日期和时间函数：</span><br><span class="line">当前日期和时间的函数：curdate(), current_date(), curdate()</span><br><span class="line">时间函数获取系统当前时间：curtime(), current_time(), curtime() </span><br><span class="line">获取当前系统日期和时间： current_timestamp(), localtime(), now(), sysdate()</span><br><span class="line">Unix时间戳函数：unix_timestamp()</span><br><span class="line">将UNIX时间戳转为普通格式时间： from_unixtime(&apos;1232131&apos;)</span><br><span class="line">返回UTC日期的函数和返回UTC时间的函数：utc_date(), utc_time(),</span><br><span class="line">返回月份的函数： month(date), monthname(date)</span><br><span class="line">获取日期的函数： dayname(d)， dayofweek(d), weekday(d)</span><br><span class="line">获取天数的函数： dayofyear(d), dayofmonth(d) </span><br><span class="line">获取年份、季度、小时、分钟、秒钟的函数：year(),quarter(), minute(), second()</span><br><span class="line">获取日期的指定值的函数：  extract(type from d)</span><br><span class="line">时间和秒钟转换的函数：time_to_sec(), sec_to_time(), </span><br><span class="line">计算日期和时间的函数：date_add(), adddate(), date_sub(), subdate(), addtime(), datediff(),subtime(), </span><br><span class="line">将日期和时间格式化的函数：date_format(), time_format(), get_format(), </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">条件判断函数：</span><br><span class="line">if(expr,v,v1)</span><br><span class="line">ifnull(v1,v2)</span><br><span class="line">case, case value when, case when</span><br><span class="line"></span><br><span class="line">系统信息函数:</span><br><span class="line">获取版本号、连接数、数据库名的函数：select version(), connect_id(), show processlist() select database(), select schema()</span><br><span class="line">获取用户名的函数：select user() | current_user() | system_user()</span><br><span class="line">获取字符串的字符集和排序方式的函数：charset(&apos;abc&apos;), charset(convert(&apos;abc&apos; using latin1), charset(version))</span><br><span class="line">获取最后一个自动生成的ID值的函数：select last_insert_id() </span><br><span class="line"></span><br><span class="line">加密函数：</span><br><span class="line">password(str)</span><br><span class="line">md5(str)</span><br><span class="line">加密函数：encode(str,pswd_str)</span><br><span class="line">解密函数：decode(crypt_str,pswd_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他函数：</span><br><span class="line">格式化函数：format()</span><br><span class="line">不同进制的数字进行转换的函数：conv() </span><br><span class="line">IP地址与数字相互转换的函数：inet_aton(), inet_ntoa()</span><br><span class="line">加锁函数和解锁函数：select get_lock(), is_used_lock(), is_free_lock(), release_lock()</span><br><span class="line">重复执行指定操作的函数：denchmark() </span><br><span class="line">改变字符集的函数：convert() </span><br><span class="line">改变数据类型的函数：cast(), convert()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">查询语句：</span><br><span class="line">基本查询：</span><br><span class="line">select &#123; *  | &#125; [from table_name  [ where &lt;&gt;] [group by &lt;&gt;] [ having &lt;&gt; ] [ order by &lt;&gt; ] [ limit [&lt;&gt;,] &lt;row count&gt;]  ]</span><br><span class="line">select filed,field1...fieldN from [table | view] where [&lt;condition&gt;]</span><br><span class="line">单表查询：</span><br><span class="line">查询所有字段：select * from table;</span><br><span class="line">查询指定字段：select filed,field1... from table;</span><br><span class="line">查询指定记录：select filed,filed1... from table where condition;</span><br><span class="line">带 IN 关键字的查询：select filed,filed1... from table where filed in (a,z) order by field;</span><br><span class="line">带 Between and 的范围查询：select filed from table where filed between a and z;</span><br><span class="line">带 Like 的字符匹配查询：select filed from table where filed like &apos;%&apos;</span><br><span class="line">% 匹配任意长度的字符，     _ 下划线只能匹配任意一个字符</span><br><span class="line">查询空值：select filed from table where filed is null | is not null </span><br><span class="line">带 And 的多条件查询：select field, field1 from table where filed &gt; condition and filed &gt; condition;</span><br><span class="line">带 Or 的多条件查询：select field, filed1 from table where field = condition or filed1 = condition;</span><br><span class="line">查询结果不重复：select distinct field from table;</span><br><span class="line">对查询结果排序：select field,filed1 from table order by field | desc | asc </span><br><span class="line">分组查询：</span><br><span class="line">gourp by field having condition</span><br><span class="line">创建分组，使用having过滤分组， 在group by 字句中使用with rollup， 多字段分组  group by 和order by 一起使用</span><br><span class="line">select filed,filed1 from table gourp by filed having count(filed1) &gt; condition;&lt;F8&gt;&lt;F9&gt;</span><br><span class="line">select filed,field1 from table gourp by filed with rollup;</span><br><span class="line">用Limit 限制查询结果的数量：select * from table limit n | n,m;</span><br><span class="line"></span><br><span class="line">集合函数查询：</span><br><span class="line">count(),sum()avg()max()min()</span><br><span class="line">连接查询：</span><br><span class="line">内连接：inner join </span><br><span class="line">select tb_1.field from table where tb_2.filed = tb_1.id;</span><br><span class="line">外连接：left join, right join</span><br><span class="line">复合条件连接查询：</span><br><span class="line">子查询：</span><br><span class="line">子查询：</span><br><span class="line">合并查询：</span><br><span class="line">为表和字段取别名：</span><br><span class="line">正则表达式查询：</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; MySQL &lt;/center&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://yoursite.com/2019/08/11/Hexo-Note/"/>
    <id>http://yoursite.com/2019/08/11/Hexo-Note/</id>
    <published>2019-08-11T02:59:43.000Z</published>
    <updated>2019-08-11T06:34:10.082Z</updated>
    
    <content type="html"><![CDATA[<center> Hexo 基础和语法 </center><a id="more"></a> <p><code>npm install -g hexo-cli</code><br><code>hexo init &lt;Folder&gt;</code><br><code>npm install</code><br><code>vim package.json</code><br><code>hexo new [layout] &lt;title&gt;</code><br><code>hexo generate = hexo g</code><br><code>hexo publish [layout] &lt;filename&gt;</code><br><code>hexo server -p xxxx -s --static -l --log</code><br><code>hexo deploy = hexo d</code><br><code>hexo render &lt;file1&gt; [file2] ... -o --output</code><br><code>hexo migrate</code><br><code>hexo clean = hexo c</code><br><code>hexo list &lt;type&gt;</code><br><code>hexo version</code><br><code>hexo --safe</code><br><code>hexo --debug</code><br><code>hexo --silent</code><br><code>hexo --config custom.yml</code><br><code>hexo --draft</code><br><code>hexo --cwd /path/to/cwd</code></p><p><code>npm install hexo-migrator-rss --save</code><br><code>hexo migrate rss &lt;source&gt;</code><br><code>npm install hexo-migrator-wordpress --save</code><br><code>hexo migrate wordpress &lt;source&gt;</code>  </p><h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><p><code>hexo new [layout] &lt;title&gt;</code><br><code>layout:  post &gt; source/_posts    page  &gt; source     draft     &gt; source/_drafts</code><br><code>hexo new photo &quot;TEXT&quot;</code>  </p><h3 id="Front-Matter"><a href="#Front-Matter" class="headerlink" title="Front-Matter"></a>Front-Matter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">title: TEXT</span><br><span class="line">date: DATE</span><br><span class="line">updated: UPDATE_TIME</span><br><span class="line">comments: true</span><br><span class="line">tags: TEXT</span><br><span class="line">categories: TEXT</span><br><span class="line">permalink: url</span><br><span class="line">keywords: TEXT</span><br><span class="line">copyright: true   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tag Plugins</span><br><span class="line"></span><br><span class="line">引用块</span><br><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125; </span><br><span class="line">content </span><br><span class="line">&#123;% endblockquote %&#125; </span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125; </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">反引号代码块</span><br><span class="line"></span><br><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h3><p><code>npm install hexo-server --save</code><br><code>hexo server -p 5000</code><br><code>hexo server -s</code><br><code>hexo server -i 192.168.1.1</code> </p><h3 id="MADE-FILES"><a href="#MADE-FILES" class="headerlink" title="MADE FILES"></a>MADE FILES</h3><p><code>hexo generate</code><br><code>hexo generate --watch</code><br><code>hexo generate --deploy</code><br><code>hexo deploy --generate</code><br><code>hexo g -d</code><br><code>hexo d -g</code> </p><h3 id="DEPLOY"><a href="#DEPLOY" class="headerlink" title="DEPLOY"></a>DEPLOY</h3><p><code>npm install hexo-deploy-git --save</code><br><code>hexo deploy</code><br><code>deploy:     type: git    repo: &lt;repository url&gt;    branch: [branch_name]    message: [message]</code></p><h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h3><p><code>npm install hexo-deployed0-sftp --save</code><br><code>vim _config.ymldeploy:    type: sftp    host: &lt;host&gt;    user: &lt;user&gt;    pass: &lt;password&gt;     remotePath: [remote path]    port: [port]    privateKey: [path/to/privateKey]    passphrase: [passphrase]    agent: [path/to/agent/socket]</code></p><h3 id="PERMALINKS"><a href="#PERMALINKS" class="headerlink" title="PERMALINKS"></a>PERMALINKS</h3><p><code>vim _config.ymlpermalink_defaults:     lang: en|zh-Hans</code></p><h3 id="THEME"><a href="#THEME" class="headerlink" title="THEME"></a>THEME</h3><p><code>git clone git@github.com/&lt;username&gt;/xxx.git theme/xxxcd xxxnpm install</code></p><h3 id="TEMPLATE"><a href="#TEMPLATE" class="headerlink" title="TEMPLATE"></a>TEMPLATE</h3><p><code>index          首页post        文章page        分页    archive        归档category    分类tag        标签</code></p><h3 id="具体看官方API"><a href="#具体看官方API" class="headerlink" title="具体看官方API"></a>具体看官方API</h3><p><a href="https://hexo.io/zh-cn/docs/" title="HEXO_DOC" target="_blank" rel="noopener">HEXO-DOC</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Hexo 基础和语法 &lt;/center&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://yoursite.com/2019/08/11/JavaScript-Note/"/>
    <id>http://yoursite.com/2019/08/11/JavaScript-Note/</id>
    <published>2019-08-11T02:28:14.000Z</published>
    <updated>2019-08-11T02:29:15.425Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/categories/JavaScript/JQuery/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/JavaScript/JQuery/Vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://yoursite.com/2019/08/11/Nginx-Note/"/>
    <id>http://yoursite.com/2019/08/11/Nginx-Note/</id>
    <published>2019-08-11T02:14:23.000Z</published>
    <updated>2019-08-12T14:28:20.815Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a> <h3 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h3><p>基本语法<br>常见用法<br>虚拟主机<br>反向代理<br>缓存<br>负载均衡</p><h3 id="配置文件由指令与指令块构成"><a href="#配置文件由指令与指令块构成" class="headerlink" title="配置文件由指令与指令块构成"></a>配置文件由指令与指令块构成</h3><p><a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">Nginx_DOC</a><br>每条指令以 ； 分号结尾，指令与参数间以空格符号分隔<br>指令块以 {} 大括号将多条指令组织在一起<br>include 语句允许组合多个配置文件以提升可维护性<br>使用# 符号添加注释，提高可读性<br>使用 $ 符号使用变量<br>部分指令的参数支持正则表达式<br>配置参数： 时间的单位<br>s: seconds    m: minutes    h:hours     d:days  w:weeks   M:months,30 days   y:years,365 days<br>           空间的单位<br>bytes    k/K: kilobytes        m/M: megabytes        g/G: gigabytes<br>eg:  </p><figure class="highlight"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">includemime.types;</span><br><span class="line">upstream xxx &#123;</span><br><span class="line">server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 443 http2;</span><br><span class="line"># Nginx Config syntax</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">proxy_cache my_cache;</span><br><span class="line">expires 3m;proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">proxy_cache_valid 200 304 302 1d;</span><br><span class="line">proxy_pass http://xxx.xxx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载，热部署，日志切割"><a href="#重载，热部署，日志切割" class="headerlink" title="重载，热部署，日志切割"></a>重载，热部署，日志切割</h3><p>Nginx 命令行：<br>格式： nginx -s reload<br>帮助： -？ -h<br>使用指定的配置文件： -c<br>指定配置指令： -g<br>指定运行目录： -p<br>发送信号： -s    ：    立刻停止服务： stop        优雅的停止：quit    重载配置文件： reload   重新开始记录日志文件 reopen<br>测试配置文件是否有语法错误： -t        -T<br>打印nginx的版本信息、编译信息等： -v    -V</p><p>重载： nginx -s reload<br>热部署：nginx 版本升级， 编译安装， kill -USR2 nginxID(ps -ef | grep nginx), kill -WINCH ID(进程号)<br>日志切割：xxx.lg(日志文件) nginx -s reopen </p><h3 id="Nginx-配置静态资源Web服务器"><a href="#Nginx-配置静态资源Web服务器" class="headerlink" title="Nginx 配置静态资源Web服务器"></a>Nginx 配置静态资源Web服务器</h3><p>http {<br>    include        mime.types;<br>    #default_type    application/octet-stream;<br>    log_format        main        ‘$remote_addr - $remote_user [$time_local] “$request”  ‘<br>                                ‘$status  $body_bytes_sent “$http_referer” ‘<br>                                ‘“$http_user_agent” “$http_x_forwarded_for”‘;<br><br>    client_max_body_size    60M;<br><br>    proxy_cache_path    /tmp/nginxcache    levels=1:2    keys_zone=my_cache:10m    max_size=10g inactive=60m use_temp_path=off;<br><br><br>    #access_log        logs/access.log        main;<br><br>    sendfile        on;<br>    #tcp_nopush        on;<br><br>    #keepalive_timeout    0;<br>    keepalive_timeout    65;<br><br>    gzip    on;<br>    gzip_min_lengt        1;<br>    gzip_comp_level        2;<br>    gzip_types            text/plain    application/x-javascript    text/css    application/xml        text/javascript        application/x-httpd-php        image/jpeg    image/gif    image/png;</p><p>}</p><p>server {<br>    listen 8080;<br>    server_name hale.dev;</p><pre><code>access_log  logs/hale.dev.log main;location / {    alias dirpath/;    #autoindex on;                        # 开启目录浏览功能    #set $limit_rate 1k;                # 限制访问速度 每秒传输1kb    #index  index.html  index.htm;}#error_page 404            /404.html;# redirect server error pages to the static page /50x.html #error_page        500    502    503    504        /50x.html;    </code></pre><p>}</p><h5 id="nginx-s-reload"><a href="#nginx-s-reload" class="headerlink" title="nginx -s reload"></a>nginx -s reload</h5><h3 id="Nginx-搭建缓存功能的反向代理服务"><a href="#Nginx-搭建缓存功能的反向代理服务" class="headerlink" title="Nginx 搭建缓存功能的反向代理服务"></a>Nginx 搭建缓存功能的反向代理服务</h3><p>openresty实现反向代理</p><p>include vhost/****.conf;<br>upstream local {<br>    server 127.0.0.1:8080;<br>}</p><p>server {<br>    server_name hale.dev;<br>    listen 80;</p><pre><code>location / {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #proxy_cache my_cache;            #proxy_cache_key $host$uri$is_args$args;        #proxy_cache_valid    200    304    302    1d;        proxy_pass    http://local;}</code></pre><p>}</p><h4 id="此处的配置详情可以在Nginx官网-ngx-http-proxy-module-中获取"><a href="#此处的配置详情可以在Nginx官网-ngx-http-proxy-module-中获取" class="headerlink" title="此处的配置详情可以在Nginx官网 ngx__http__proxy_module 中获取"></a>此处的配置详情可以在Nginx官网 ngx__http__proxy_module 中获取</h4><h3 id="GoAccess实现可视化并实时监控access日志"><a href="#GoAccess实现可视化并实时监控access日志" class="headerlink" title="GoAccess实现可视化并实时监控access日志"></a>GoAccess实现可视化并实时监控access日志</h3>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown</title>
    <link href="http://yoursite.com/2019/08/11/MarkDown-Note/"/>
    <id>http://yoursite.com/2019/08/11/MarkDown-Note/</id>
    <published>2019-08-11T02:06:00.000Z</published>
    <updated>2019-08-16T13:51:01.683Z</updated>
    
    <content type="html"><![CDATA[<center> MarkDown 基础、语法 </center><a id="more"></a> <ol><li><p>斜体、粗体<br> <code>*斜体*  _斜体 _</code><br> <code>**粗体**</code><br> <code>*** 加粗斜体 ***</code><br> <code>~~ 删除线 ~~</code></p></li><li><p>分级标题<br> <code>#    ##    ##    ###    ####    #####    ######</code></p></li><li><p>超链接<br> <code>TEXT[Your Message](https://i-china.github.io/)</code><br> <code>TExt[Your Text][https://i-china.win/ &quot;message&quot;]</code></p></li><li><p>锚点<br> <code>Goto[Redirect](#TEXT)</code></p></li><li><p>列表<br> <code>无序列表    *    +     -</code><br> <code>有序列表    1. Text        2. Text        3. Text ...</code><br> <code>代码缩进    *   TEXT    // * 后三空格</code><br> <code>列表引用    &gt; TEXT         &gt; TEXT</code></p></li><li><p>引用<br> <code>列表嵌套    &gt;&gt;&gt; TEXT     &gt;&gt; TEXT     &gt; TEXT</code><br> <code>其他要素    &gt; T1    &gt; T2    &gt; T3    &gt; T4 ...</code></p></li><li><p>插入图片<br> <code>TEXT:![TEXT](URL &quot;TEXT&quot;)</code></p></li><li><p>内容目录<br> <code>[TOC]</code></p></li><li><p>注脚<br> <code>TEXT[^1] TEXT[^2]  TEXT[^flag]</code><br> <code>[^1]: TEXT Comment   [^2]: TEXT Comment  [^flag]: TEXT FOR flag</code></p></li><li><p>公式<br><code>$ 表示行内公式    $E=mc^2$</code><br><code>$$ 整行公式     $$\sum_{i=1}^n a_i=0$$</code></p></li><li><p>流程图<br><code>st=&gt; start: START:&gt;url   e=&gt;end: TEXT:&gt;url op1=&gt;operation: text|past // 有些复杂，不经常用，先不写了</code> </p></li><li><p>表格<br><code>居左：:----        居中：:----:或者 -----         居右：:----:</code><br><code>TEXT|TEXT|TEXT</code><br><code>-|-|-|</code><br><code>TEXT|TEXT|TEXT</code><br><code>TEXT|TEXT|TEXT</code><br><code>-----------</code><br><code>TEXT|TEXT</code><br><code>-|-:</code><br><code>TEXT TEXT | TEXT/TEXT</code></p></li><li><p>分割线<br><code>* * *</code><br><code>***</code><br><code>*****</code><br><code>- - -</code><br><code>---------</code></p></li><li><p>代码<br><code></code>CODE()<code></code><br><code>```  #include&lt;stdio.h&gt; ```</code></p></li><li><p>换行<br><code>行后 加两空格</code></p></li><li><p>文本<br><code>&lt;center&gt; TEXT &lt;/center&gt;</code><br><code>&lt;left&gt; TEXT &lt;/left&gt;</code><br><code>&lt;right&gt; TEXT &lt;/right&gt;</code><br><code>&lt;u&gt; TEXT &lt;/u&gt;</code></p></li></ol><h5 id="备注：-有些不清楚，需要随用随查！"><a href="#备注：-有些不清楚，需要随用随查！" class="headerlink" title="备注： 有些不清楚，需要随用随查！"></a>备注： 有些不清楚，需要随用随查！</h5>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; MarkDown 基础、语法 &lt;/center&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Golang</title>
    <link href="http://yoursite.com/2019/08/09/Golang-Note/"/>
    <id>http://yoursite.com/2019/08/09/Golang-Note/</id>
    <published>2019-08-09T10:59:22.000Z</published>
    <updated>2019-08-11T07:03:52.959Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="http://yoursite.com/2019/08/09/Python-Note/"/>
    <id>http://yoursite.com/2019/08/09/Python-Note/</id>
    <published>2019-08-09T10:59:15.000Z</published>
    <updated>2019-08-11T06:35:50.331Z</updated>
    
    <content type="html"><![CDATA[<p>Python Note</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python Note&lt;/p&gt;

      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2019/08/09/Linux-Note/"/>
    <id>http://yoursite.com/2019/08/09/Linux-Note/</id>
    <published>2019-08-09T10:59:08.000Z</published>
    <updated>2019-08-17T12:24:00.749Z</updated>
    
    <content type="html"><![CDATA[<center> Linux </center> <a id="more"></a><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><p><code>Centos Ubuntu</code> </p><h3 id="Linux-文件和目录管理"><a href="#Linux-文件和目录管理" class="headerlink" title="Linux 文件和目录管理"></a>Linux 文件和目录管理</h3><p>cd: 切换目录<br>    cd 选项<br>~ ： 当前用户的主目录    ~用户名：指定用户的主目录    - ： 上次所在的目录        . : 当前目录     ..: 上级目录</p><p>pwd：显示当前路径</p><p>whoami：当前登陆的用户</p><p>ls： 查看目录下文件<br>    ls 选项 文件<br>    -a:    全部文件    -A:    全部不包括. ..    -d:    目录本身    -f:    以文件名排序    -F:    再文件或目录后加上类型的指示符号    -h:    以易读方式显示    -i:显示inode节点信息<br>    -n:    以UID和GID代替用户名和群组    -r:    将排序结果反向输出    -R:    列出目录下所有文件    -S:    以文件容量大小排序    -t:    以时间排序    -l:    使用长格式列出文件和目录信息</p><p>ls:<br>第一列： 权限        第二列：计数(硬连接数)    第三列：所有者    第四列：所属组        第五列：大小    第六列：文件修改时间        第七列: 文件名和目录名</p><p>mkdir：创建目录文件夹<br>    mkdir 选项 文件目录名<br>    -p: 递归创立目录        -m: 自定义目录权限        </p><p>rmdir: 删除空目录<br>    rmdir 选项 文件目录名<br>    -p：递归删除空目录        rmdir</p><p>touch：创建文件及修改文件时间戳<br>    touch 选项 文件名<br>    选项：    -a：访问时间    -c：时间参数    -d：修订日期        -m：修改时间    -t：修订时间</p><p>ln：在文件之间建立链接(硬链接和软链接)<br>    ln 选项 源文件    目标文件<br>        -s：建立软链接文件，不加-s 则建立硬链接<br>        -f：强制  如果目标文件存在，则删除后再建立链接文件</p><p>cp：复制文件和目录<br>    cp 选项 源文件 目标文件<br>        -a：相当于 -d -p -r 的集合<br>        -d：如源文件为软链接，则复制出的目标文件也为软链接<br>        -i：询问 是否覆盖<br>        -l：把目标文件建立为源文件的硬链接，而不是复制源文件<br>        -s：把目标文件建立为源文件的软连接，而不是复制。。。<br>        -p：复制后目标文件保留源文件的属性 所有者、所属组、权限和时间<br>        -r：递归复制，用于复制父母<br>        -u：若目标文件比源文件有差异，则使用该选项更新目标文件，用于对文件的升级和备用</p><p>rm：删除文件或目录<br>    rm 选项 文件或目录<br>        -f： 强制删除<br>        -i:  删除前给出提示<br>        -r： 递归删除，用于目录</p><p>mv：移动文件或改名<br>    mv 选项 文件或目录<br>        -f：强制覆盖，不询问，直接覆盖<br>        -i：交互移动，询问是否覆盖<br>        -n：如果目标文件已存在，不会覆盖移动，也不询问<br>        -v: 显示文件或目录移动过程<br>        -u: 若目标文件存在，两者相比，源文件更新，对目标文件进行升级</p><h3 id="打包-归档-和压缩"><a href="#打包-归档-和压缩" class="headerlink" title="打包(归档)和压缩"></a>打包(归档)和压缩</h3><p>tar：打包<br>    tar 选项 源文件或目录<br>        -c：将多个文件或目录打包<br>        -A：追加tar文件到归档文件<br>        -f：指定包的文件名<br>        -v：显示打包过程<br>        -x：对tar包做 解压<br>        -C：指定解压包位置<br>        -z：压缩和解压缩”.tar.gz”<br>        -j：压缩和解压缩”.tar.bz2”</p><p>tar.gz:        -zxvf    -zcvf<br>tar.bz2:    -jxvf    -jcvf</p><p>zip: 压缩文件和目录<br>    zip 选项 压缩包名    源文件或源目录列表<br>        -r：    递归压缩目录，所有文件以及目录全部压缩<br>        -m：    压缩后，删除源文件<br>        -v：    显示详细的压缩过程<br>        -q：    不显示命令执行过程<br>        -压缩级别：    1~9        -1 代表压缩速度最快  -9 代表压缩效果更好<br>        -u：    更新压缩文件，往压缩文件添加新文件</p><p>unzip：解压zip文件<br>    unzip 选项 压缩包名<br>        -d 目录： 将压缩文件解压到指定目录下<br>        -n：      解压时不覆盖存在的文件<br>        -o：      解压时覆盖已经存在的文件，无需确认<br>        -v：      查看压缩文件的详细信息<br>        -t：      测试有无损坏，并不解压<br>        -x 文件列表: 解压文件，但不包含文件列表中指定的文件</p><p>gzip：压缩文件或目录<br>    gzip 选项 源文件<br>        -c：将压缩数据输出到标准输出中，保留源文件<br>        -d：对压缩文件解压<br>        -r：递归压缩指定目录下以及目录下的所有文件<br>        -l：对每一个压缩文件 显示字段  压缩文件大小  未压缩大小  压缩比  未压缩名称<br>        -数字 ：指定压缩等级， -1 等级最低，压缩比最差</p><p>gunzip：解压缩文件或目录<br>    gunzip 选项 文件<br>        -r：递归处理，解压缩指定目录下所有文件<br>        -c：把解压缩后的文件输出到标准设备<br>        -f：强制解压缩文件，不理会是否已存在<br>        -l：列出压缩文件内容<br>        -v：显示命令执行过程<br>        -t：测试压缩文件是否正常，不做任何操作</p><p>bzip2：压缩文件 bz2格式<br>    bzip2 选项 源文件<br>        -d: 执行解压缩<br>        -k: 解压缩完成后，删除源文件，要保留源文件，需使用此选项<br>        -f：再解压或解压缩时，若同名，默认不覆盖，此选项会强制覆盖现有文件<br>        -t：测试压缩或解压缩的完整性<br>        -v：显示详细信息<br>        -数字： -1 等级最低，压缩比最差 -9 压缩比最高</p><p>bunzip2 bz2 格式的及压缩命令<br>    bunzip2 选项<br>        -k:     解压缩后，默认删除压缩文件，若要保留，使用此参数<br>        -f： 解压缩时，若同名，默认不覆盖，若要覆盖，使用此参数<br>        -v： 显示命令执行过程<br>        -L:     列出压缩文件内容</p><h3 id="三剑客-grep-sed-awk"><a href="#三剑客-grep-sed-awk" class="headerlink" title="三剑客 grep        sed        awk"></a>三剑客 grep        sed        awk</h3><p>cat： 连接文件并打印输出到标准输出设备<br>    cat  选项    文件名<br>        -A：列出所有隐藏符号<br>        -E:    列出每行结尾的回车符$<br>        -n：对输出的所有行进行编号<br>        -b：只对非空行进行编号<br>        -T：把Tab键 ^| 显示<br>        -V：列出特殊字符<br>        -s：连续2行以上的空白行，替换为1行的空白行<br>        &gt;:    合并<br>        &gt;&gt;：追加</p><p>more：分屏显示文件内容<br>    more 选项 文件名<br>        -f：计算行数 实际的行数，<br>        -p：清屏后显示内容<br>        -c：先显示内容再清楚旧的资料<br>        -s：连续两行以上的空白行，就替换为一行的空白行<br>        -u：不显示下引号<br>        +n：从第n行开始显示文件内容，n代表数字<br>        -n：一次显示的行数，n表示数字<br>    交互指令及功能<br>        h或？：    帮助信息<br>        q或Q ：    退出<br>        v： 在当前行启动一个编辑器<br>        ：f 显示当前文件的文件名和行号<br>        !&lt;命令&gt;：在子shell中执行指定命令<br>        回车：向下移动一行<br>        空格：向上移动一行<br>        Ctrl+l：刷新屏幕<br>        =：    显示当前行的行号<br>        ‘： 转到上一次搜索开始的地方<br>        Ctrl+f： 向下滚动一页<br>        .：重复上次输入的命令<br>        /字符串：搜索指定的字符串<br>        d：向下移动半页<br>        b：向上移动半页</p><p>head：显示文件开头的内容<br>    head 选项 文件名<br>        -nK： K表示行数，除了文件最后K行外，显示剩余的全部内容<br>        -cK： K表示字节，除了文件最后K字节，显示剩余全部的内容<br>        -v：  显示文件名</p><p>less： 查看文件内容<br>    less 选项 文件名<br>        -N： 显示每行的行号<br>        -S： 行过长时舍弃超出部分<br>        -e： 文件显示结束后，自动离开<br>        -g： 只标志最后搜索到的关键词<br>        -Q： 不使用警告音<br>        -i： 忽略搜索时的大小写<br>        -m： 显示类似more的百分比<br>        -f:     强迫打开特殊文件<br>        -s:     显示连续行为一行<br>        -b： 设置缓冲区的大小<br>        -o： 将less输出的内容保存到指定文件中<br>        -x： 将tab键显示为规定的数字空格<br>    交互指令及功能<br>        /    ?    n    N    b    d    h|H        q|Q        y    空格键     回车键        PgDn   PgUp<br>        Ctrl + f    Ctrl + b    Ctrl + d    Ctrl + u    j    k    G    g    ZZ     v        [<br>            ]    p    u    </p><p>tail： 显示文件结尾的内容<br>    tail 选项  文件名<br>        -nK： K指行数，从文件的第K行开始输出<br>        -cK： K指字节数，从文件第K个字节开始输出<br>        -f：  输出文件变化后新增加的数据</p><h4 id="grep：-查找文件内容-正则表达式"><a href="#grep：-查找文件内容-正则表达式" class="headerlink" title="grep： 查找文件内容 正则表达式"></a>grep： 查找文件内容 正则表达式</h4><pre><code>正则表达式的通配符    c* ：  匹配0个空白或多个字符c(c为任一字符)    .  ：  匹配任何一个字符，只能是一个字符    [xyz]：匹配方括号中的任意一个字符    [^xyz]：匹配除方括号中字符外的所有字符    ^  ：  锁定行的开头    $  ：    锁定行的结尾    需结合反斜杠 \，grep 命令基本格式：    grep    选项    模式    文件名        -c ：列出文件中包含模式的行数        -i ：忽略模式中的字母大小写        -l ：列出带有匹配行的文件名        -n ：在每一行的最前面列出行号        -v ：列出没有匹配模式的行        -w ：把表达式当作一个完整的单字符来搜寻，忽略部分匹配的行</code></pre><h4 id="sed-根据脚本命令处理文本文件中的数据，命令从命令行输入，或存储在一个文本文件中，此命令执行数据顺序：-1-每次仅读取一行内容-2-根据规格命令匹配并修改数据-3-将执行结果输出"><a href="#sed-根据脚本命令处理文本文件中的数据，命令从命令行输入，或存储在一个文本文件中，此命令执行数据顺序：-1-每次仅读取一行内容-2-根据规格命令匹配并修改数据-3-将执行结果输出" class="headerlink" title="sed 根据脚本命令处理文本文件中的数据，命令从命令行输入，或存储在一个文本文件中，此命令执行数据顺序： 1.每次仅读取一行内容 2. 根据规格命令匹配并修改数据 3.将执行结果输出"></a>sed 根据脚本命令处理文本文件中的数据，命令从命令行输入，或存储在一个文本文件中，此命令执行数据顺序： 1.每次仅读取一行内容 2. 根据规格命令匹配并修改数据 3.将执行结果输出</h4><pre><code>sed 选项 脚本命令 文件名    -e 脚本命令： 将其后跟的脚本命令添加到已有的命令中    -f 脚本命令文件： 将其后文件中的脚本命令添加到已有的命令中    -n ： 所有脚本指定执行完毕后，自动输出处理后的内容，需使用print来输出    -i ： 直接修改源文件，慎用！sed 脚本命令    sed s 替换脚本命令： [address]s/pattern/reloacement/flags        address : 指定要操作的具体行        pattern ：需要替换的内容     replacement：要替换的新内容sed s 命令 flags 标记及功能    n ： 1-512 之间数字，表示指定要替换的字符串出现第n次时才进行替换    g ： 匹配到的所有内容进行替换    p ： 打印与替换命令中指定的模式匹配的行 与-n选项使用    w file ：将缓冲区中的内容写道指定的file文件中    &amp; ： 用正则表达式匹配到的内容进行替换    \n ： 匹配第n个字串，该字串之前在pattern中用 \(\) 指定        \ ： 转义sed d 替换脚本命令    需要删除文本中的特定行，用d脚本命令，删除指定行中的所有内容，如忘记指定具体行，删删除所有内容    [address]dsed a    | sed i 脚本命令    a 表示在指定行的后面附加一行，i表示在指定行的前面插入一行    [address]a(i或) \新文本内容sed c 替换脚本命令    c 表示将指定行中的所有内容，替换成该选项后面的字符串    [address]c\用于替换的新文本sed y 转换脚本命令    y 转换命令唯一可以处理单个字符    [address]y/inchars/outchars/sed p 打印脚本命令    p 搜索符号条件的行，输出该行的内容    [address]psed w 脚本命令    w 将文本中指定行的内容写入文件    [address]w filenamesed r 脚本命令    r 将一个独立文件的数据插入到当前数据流的指定位置    [address]r filename sed q 退出脚本命令    q 使sed命令在第一次匹配任务结束后，退出sed程序</code></pre><p>sed 脚本命令的寻址方式<br>    两种：<br>        1.[address]脚本命令 </p><pre><code>2.address{    多个脚本命令}</code></pre><h4 id="awk-文本数据处理工具"><a href="#awk-文本数据处理工具" class="headerlink" title="awk 文本数据处理工具"></a>awk 文本数据处理工具</h4><pre><code>基本格式：    awk 选项 &apos;脚本命令&apos; 文件名        -F fs ：指定以fs作为输入行的分隔符，默认以分隔符为空格或制表符        -f file ：从脚本文件中读取awk脚本指令，取代直接在命令行中输入指令        -v var=val：在执行前，设置一个变量var，初始值为 valawk 使用数据字段变量    $0 ：代表整个文本行    $1 ： 代表文本行的第1个数据字段    $2 :  。。。第2个数据字符按    $n : 代表第n个数据字段awk 脚本命令使用多个命令    awk &apos;{        $a = &quot;some text&quot;        print $0    }&apos;awk 从文件中读取程序    awk -F: -f awk.sh /etc/passwdawk BEGIN 关键字    awk &apos;BEGIN&apos; {print &quot;text&quot;}awk END 关键字    awk &apos;ENG&apos; {print &quot;text&quot;}</code></pre><h3 id="软件安装相关"><a href="#软件安装相关" class="headerlink" title="软件安装相关"></a>软件安装相关</h3><p>RPM 包安装、卸载、升级<br>    /etc/                ：配置文件安装目录<br>    /usr/bin/            ：可执行的命令安装目录<br>    /usr/lib/            ：程序所使用的函数库保存位置<br>    /usr/share/doc/        ：基本的软件使用手册保存位置<br>    /usr/share/man/        ：帮助文件保存位置<br>RPM 包的安装<br>    rpm -ivh 包名<br>        -i ：安装(install)<br>        -v ：显示详细信息(verbose)<br>        -h ：打印 # 显示安装进度(hash)<br>    rpm -ivh x.rpm xx.rpm xxx.rpm<br>    rpm 选项 包名<br>        -nodeps ： 不检测依赖性安装<br>        -replacefiles ：替换文件安装<br>        -replacepkgs ：替换软件包安装<br>        -force ：强制安装<br>        -test ：测试安装<br>        -prefix ：指定安装路径</p><h4 id="软件的启动和管理"><a href="#软件的启动和管理" class="headerlink" title="软件的启动和管理"></a>软件的启动和管理</h4><pre><code>service 服务名 start | stop | restart | status     stat: 启动服务    stop: 停止服务    restart:    重启服务    status:        查看服务状态检测端口：        netstat -tlun | grep 80</code></pre><p>RPM 包的升级<br>    rpm -Uvh 包名    ： 如没安装过则直接安装<br>    rpm -Fvh 包名    ： 如没有安装，则不安装</p><p>RPM 包的卸载    (e 时 erase)<br>    rpm -e 包名  </p><p>RPM 命令查询软件包 (-q, -qa, -i ,-p, -l, -f ,-R )<br>    rpm 选项 查询对象<br>        -q  ：表示查询， query<br>        -qa ：查询系统中所有安装的软件包<br>        -qi ：查询软件包的详细信息 i = information<br>        -ql ：查询软件包的文件列表<br>        -qf ：查询系统文件属于哪个RPM包<br>        -qR ：查询软件包的依赖关系</p><p>RPM 包验证和数字证书(数字签名)<br>    rpm 包校验<br>        -Va ：校验系统中已安装的软件包<br>        -V  ：校验已安装的包名<br>        -Vf ：校验某个系统文件是否被修改</p><p>提取RPM包文件(cpio命令)<br>    cpio 用于从归档包中存入和读取文件<br>        cpio 选项<br>            -o ： 指 copy-out 模式，把数据备份到文件库中<br>            -v ： 显示备份过程<br>            -c ： 使用较新的protable format 存储方式<br>            -B ： 设定输入/输出块为5120Bytes，而不是模式的512Bytes<br>            -i ： 指 copy-in ，把数据从文件库中恢复<br>            -d ： 还原时自动新建目录<br>            -u ： 自动使用较新的文件覆盖较旧的文件<br>            -p ： 指复制模式</p><p>YUM 源配置<br>    Yum 源配置文件： /etc/yum.repos.d/ ， 文件扩展名为：”*.repo”<br>        参数：<br>            [base]: 容器名称<br>            name：容器说明<br>            mirrorlist：镜像站点<br>            baseurl：源服务器的地址<br>            enable：此容器是否生效， 不写或写enable表示生效，0为不生效<br>            gpgcheck：为1表示RPM的数字证书生效，0为不生效<br>            gpgkey：数字证书的公钥文件保存位置<br>    Yum 查询、安装、升级、卸载<br>        yum list : 列出已安装的和可安装的软件名<br>        yum list 包名 : 查询安装情况<br>        yum search 关键字 : 查找与关键字相关的所有软件包<br>        yum info 包名 : 查询执行软件包的详细信息</p><p>Yum 安装命令<br>        yum -y install 包名<br>            install ： 安装<br>            -y ： 自动回答yes</p><p>Yum 升级命令<br>        yum -y update ： 升级所有软件包<br>        yum -y update 包名 ： 升级特定的软件包</p><p>Yum 卸载命令<br>        yum remote 包名 ：卸载指定的软件包</p><p>Yum 查询软件组包含的软件<br>        yum groupinfo 软件组名 ： 查询软件组包含的软件</p><p>Yum 安装软件组<br>        yum groupinstall 软件组名 ： 安装指定软件组，组名由grouplist查询出来</p><p>Yum 卸载软件组<br>        yum groupremove 软件组名 ： 卸载指定软件组</p><p>Linux 源码包安装和卸载<br>    首先安装 gcc 和 make<br>        rpm -q gcc   |   yum -y install gcc<br>        rpm -q make  |   yum -y install make<br>    下载源码包，如:  xxx.tar.gz<br>    解压： tar -zxvf xxx.tar.gz<br>    进入解压目录<br>    检测系统环境是否符合安装要求： ./configure<br>        定义需要的功能选项：<br>            ./configure –prefix=安装路径<br>        执行 ./configure–help 查询支持的功能<br>    编译： make<br>    正式安装软件： make install<br>    重装：在make前，要执行 make clean ，他会清空 Makefile 文件或编译产生的 .o 头文件</p><p>Linux 源码包卸载<br>    rm -rf /usr/local/xxx  ： 删除软件的安装目录，删除前需停止服务</p><p>Linux 源码包快速升级<br>    使用补丁更新源码包： 省去./configure 生成新的 Makefile文件，还省去了编译<br>    Linux 补丁文件的生成和使用<br>        diff 选项 old new<br>            -a ： 将任何文档当作文本文档处理<br>            -b ： 忽略空格造成的不同<br>            -B ： 忽略空白行造成的不同<br>            -l ： 忽略大小写造成的不同<br>            -N ： 比较两个目录时，如某个文件只在一个目录，则另一个目录视为空<br>            -r ： 比较目录时，递归比较子目录<br>            -u ： 使用同一输出格式<br>    1. 创建两个文件<br>        mkdir test  | cd test | vi old.txt  | vim new.txt  </p><pre><code>2. 利用diff命令，比较两个文件(old.txt 和 new.txt)的不同，并生成补丁文件 (txt.patch)，执行一下代码：    diff -Naur /roor/test/old.txt  /root/text/new.txt &lt; txt.patch</code></pre><p>给软件打入补丁<br>    1. 下载补丁文件<br>    2. 复制补丁文件到源码包解压目录中 cp xxx.diff 软件包名<br>    3. 给旧软件打入补丁  cd 软件目录    | vi xxx.diff<br>    4. 重新编译 软件包源码  make<br>    3. 安装 软件  make install</p><h3 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h3><p>UID 和 GID (用户ID 和 组ID)</p><p>/etc/passwd<br>        系统用户配置文件，存储系统所有用户的基本信息，所有用户有读操作<br>        表达的含义：<br>        用户名： 密码：UID(用户ID) ：GID(组ID) ：描述性信息 ： 主目录 ： 默认Shell</p><pre><code>用户名： 代表用户身份的字符串密 码 ：x 表示此用户设有密码， 真正的密码保存在 /etc/shadow 文件中UID ： 用户ID，识别不同的用户 0~655350 ： 超级用户 1 ~ 499 ： 系统用户500 ~ 65535 ： 普通用户GID ： Group ID ，组ID 初始组： 如：建立用户lamp的同时，建立 lamp组作为lamp用户的初始组附加组： 指用户可以加入多个其他的用户组，并拥有这些组的权限描述性信息： 主目录： 用户登陆后有操作权限的访问目录，用户的主目录默认的Shell：Linux的解释器，用户和Linux内核沟通的桥梁，默认 bash /bin/bash</code></pre><p>/etc/shadow (影子文件)<br>        用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的款期时间：账号失效时间：保留字段</p><pre><code>忘记密码：    1.重启进入单用户模式， 系统会提供root权限的bash 接口，用 passwd命令修改账号密码；    2.通过挂载根目录，修改 /etc/shadow，将账户的root密码清空</code></pre><p>/etc/group<br>    用户组配置文件，用户组的所有信息存放在此文件中<br>        组名：密码：GID：该用户组中的用户列表</p><p>/etc/gshadow<br>    组名：加密密码：组管理员：组附加用户列表</p><p>初始组和附加组<br>    添加新用户： useradd user<br>    添加新群组： groupadd group<br>    将用户xxx加入到xxx群组： usermod -G group user<br>    查找： grep ‘user’ /etc/passwd /etc/group /etc/gshadow</p><pre><code>一个用户可以所属多个附加组，但只能有一个初始组查看用户所属全部群组:    gourps</code></pre><p>/etc/login.defs :创建用户的默认设置文件</p><p>useradd ： 添加新的系统用户<br>    useradd 选项 用户名<br>        -u UID : 手工指定用户的UID，UID 不要小于500<br>        -d 主目录 ： 手工指定用户的主目录，必须是绝对路径，注意权限<br>        -c 用户说明 ： 手工指定 /etc/passwd 文件中各用户信息中第5哥字段的描述性内容，可随意配置<br>        -g 组名 ： 手工指定用户的初始组<br>        -G 组名 ： 指定用户的附加组<br>        -s shell ：手工指定用户的登录 Shell ，默认是 /bin/bash<br>        -e 日期 ： 指定用户的失效日期 格式为 “YYYY-MM-DD” /etc/shadow 文件的第八个字段<br>        -o ： 允许创建的用户的UID 相同，例如：useradd -u 0 -o usertest<br>        -m ： 建立用户时强制建立用户的家目录<br>        -r ： 创建系统用户 UID 在 1 ~ 499 </p><p>/etc/default/useradd 文件</p><p>passwd ：修改用户密码<br>    passwd 选项 用户名<br>        -S ：查询用户密码的状态 = /etc/shadow<br>        -l ：暂时锁定用户<br>        -u ：解锁用户<br>        –stdin ：通过管道符输出的数据作为用户的密码，主要用于批量添加用户<br>        -n ： 天数 不能修改密码期限 /etc/shadow 第4个字段<br>        -x ： 天数，设置密码有效期                第5个字段<br>        -w ： 天数 用户密码过期的警告天数        第6个字段<br>        -i ： 日期，用户密码失效日期            第7个字段</p><p>usermod ： 修改用户信息<br>    usermod 选项 用户名<br>        -c ： 用户说明：修改用户的说明信息 修改 /etc/paswd 文件目标用户信息的第5个字段<br>        -d ： 主目录： 修改用户的主目录        6<br>        -e ： 日期：修改用户的失效日期        8<br>        -g ： 组名：修改用户的初始组        4<br>        -u ： UID： 修改用户的UID            3<br>        -G ： 组名：修改用户的附加组，把用户加入其他用户组<br>        -l ： 修改用户名称<br>        -L ： 临时锁定用户<br>        -U ： 解锁用户<br>        -s ： shell： 修改用户的登录Shell</p><p>chage ： 修改用户密码状态<br>    chage    选项    用户名<br>        -l ： 列出用户的详细密码状态<br>        -d ： 日期   /etc/shadow 第3个字段<br>        -m ： 天数 修改密码最短保留天数  第4个字段<br>        -M ： 天数 修改密码的有效期  第5个字段<br>        -W ： 天数 修改密码过期前的警告天数 第6个字段<br>        -i ： 天数 修改密码过期后的宽限天数 第7个字段<br>        -E ： 日期 修改账号失效日期 第8个字段</p><p>userdel : 删除用户<br>    userdel -r 用户名<br>        -r : 在删除用户的同时删除用户的家目录</p><p>id ： 查看用户的UID 和GID<br>    id 用户名</p><p>su ： 用户间切换<br>    su    选项    用户名<br>        - ： 当前用户不仅切换为指定用户的身份，刚工作环境也切换为此用户的环境包括 PATH变量、MAIL变量等，可省略用户名，默认为root<br>        -l ： 同-，但后面需要添加欲切换的使用者账号<br>        -p ： 切换为指定用户的身份，但不改变当前的工作环境<br>        -m ： 同 -p<br>        -c ： 仅切换用户执行一次命令，执行后自动切换回来<br>    su 和 su - 的区别<br>        工作环境</p><p>groupadd ： 添加用户组<br>    groupadd 选项 用户<br>        -g GID ： 指定组ID<br>        -r ： 创建系统群组</p><p>groupmod ： 修改用户组<br>    groupmod    选项    用户名<br>        -g GID ： 修改组ID<br>        -n 新组名 ： 修改组名</p><p>groupdel ： 删除用户组<br>    groupdel    组名</p><p>gpasswd ： 把用户添加进组或从组中删除<br>    gpasswd        选项    组名<br>                ： 选项为空时，给群组设置密码，仅root用户可用<br>        - A user1,… ： 将群组控制权交给 user1，… 等用户管理， 是将 user1，等用户为群组的管理员，仅root用户可用<br>        -M user1，… ：将user1等加入到群组中，仅root可用<br>        -r ： 移除群组的密码，仅root可用<br>        -R ： 让群组的密码失效，仅root可用<br>        -a user ： 将user 用户加入到群组中<br>        -d user ： 将user 用户从群组中移除</p><p>newgrp ： 切换用户的有效组<br>    newgrp    组名</p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><pre><code>针对不同的用户，设置不同的文件访问权限，包括读、写、删除等ls -al    // 查看文件或目录的权限信息</code></pre><p>chgrp：修改文件和目录的所属组<br>    chgrp [-R] 所属组 文件名(目录名)<br>        -R: 递归 修改 所属组<br>chown：修改文件和目录的所有者和所属组<br>    chown [-R] 所有者 文件后目录<br>        -R: 递归 修改 所有者<br>    chown [-R] 所有者:所属组 文件或目录            </p><p>权限位<br>    文件权限 3 种， 文件 读(r), 写(w), 执行(x)<br>    每行的第一列表示权限，共11位，第一位表示具体类型，最后以为收SELinux安全规则管理<br>    读、写、执行 共 9 位字符<br>        rw-  r–  r–            // 所有者、所属群组、其他用户<br>        r ： 4<br>        w ： 2<br>        x ： 1</p><p>chmod： 修改文件或目录的权限<br>    chmod [-R] 权限值 文件名<br>        -R ：递归 设定 权限<br>    chmod [字母 u、g、o、a ] +|-|=  r|w|x 文件或目录<br>        u：用户<br>        g：群组<br>        o：其他<br>        a：所有<br>        +：加入<br>        -：删除<br>        =：设定</p><p>umask： 令新建文件和目录拥有默认权限<br>    umask                //    默认值：root用户 0022， 普通用户：0002<br>        默认权限由4个八进制数组成，第一个数代表所有者的特殊权限 (SetUID, SetGID, Sticky BIT) 最后3位022 才是真正用到的umask权限 可转换为 — -w- -w-<br>        文件或目录初始权限 = 文件或目录最大默认权限 - umask权限<br>            文件最大默认权限是666：-rw-rw-rw-            666 - 033 = 633<br>            目录最大权限默认是777 drwxrwxrwx            777 - 022 = 755<br>    默认权限修改方法：<br>        umask 022        umask 033</p><p>ACL 访问控制权限<br>    三种身份： 文件所有者、所属群组、其他用户<br>    三种权限： 读 r        、 写 w 、 访问 x<br>        权限前的字符，表示文件的具体类型，d：目录，-：普通文件，|：表示连接文件，b：设备文件<br>    ACL：Access Control List (访问控制列表)，ACL可实现单一用户设定访问文件的权限，除了传统方式，还可以用ACL进行设定<br>    mount    ：查看系统挂载的分区<br>    dumpe2fs -h /dev/sda1        // dumpe2fs 查询指定分区文件系统详细信息<br>            -h：仅显示超级块中的信息，不显示磁盘块组的信息<br>    mount -o remount,acl /                    // 重新挂载根分区，并加入ACL权限，针对分区</p><p>ACL权限设置(setfacl 和 getfacl)<br>    getfacl 文件名                //    查看文件或目录设定的ACl权限信息<br>    setfacl 选项 文件名            // 设定用户或群组对指定文件的访问权限<br>        -m ： 设定ACl权限        // setfacl -m u:user:rx /dir<br>        -x :  删除指定用户        // setfacl -x u:user    /dir<br>        -b :  删除所有的ACL权限    // setfacl -b /dir<br>        -d ： 设定默认ACL权限    // setfacl -m d:u:user:rwx 文件名    群组: d:g:group:rwx<br>        -R :  递归设定ACL权限    // setfacl -m u:user:rwx -R /dir<br>        -k ： 删除默认ACL权限</p><p>mask： 有效权限<br>    指用户或群组能拥有的最大ACL权限，给用户或群组设定的ACl权限不能超过mask规定的权限范围，超出部分无效</p><p>SetUID(SUID)文件特殊权限<br>    仅适用于可执行文件，对设有SUID的文件有执行权限，执行此文件时，会以文件所有者的身份去执行，执行结束，身份的切换也消失<br>    chmod u-s /usr/bin/passwd ： 取消SetUID<br>    SUID 特点：<br>        只有可执行文件才能设定SetUID权限，对目录无效<br>        对文件拥有执行(x)权限<br>        执行文件时，以文件所有者的身份执行<br>        SetUID 权限只在文件执行过程有效，执行完毕，也消失<br>    不要轻易设置SetUID权限，有重大安全隐患</p><p>Stick BIT (SBIT)文件特殊权限<br>    仅对目录有效，设定SBIT权限，目录下创建的文件和目录，只有自己和root有修改和删除权限</p><p>Chattr：修改文件系统的权限属性<br>    chattr [+-=] [属性] 文件或目录<br>        +：添加属性            -：移除拥有的属性        =：设定一些属性<br>        i：对文件设定i属性，不允许删除、改名、添加、修改。 对目录设置i属性，只能修改，不能建立、删除文件<br>        a：文件：只增加数据，不能修改、删除。 目录：在目录中只建立和修改文件，不能删除文件<br>        u：文件或目录：删除时，内容保存，能恢复。防止意外删除文件或目录<br>        s：与u相反，删除文件或目录，会彻底删除，不可恢复</p><p>lsattr：查看文件系统属性<br>    lsattr 选项 文件或目录名<br>        -a：不带文件或目录，显示所有文件和目录，包括隐藏<br>        -d: 目录：列出本身的隐藏属性，布列出包含文件或子目录的隐藏属性<br>        -R： 与-d相反， 目录：连同子目录隐藏信息数据一并显示</p><p>sudo：系统权限管理<br>    sudo [-b] [-u 新使用者账号] 要执行的命令<br>        -b:将后续的命令放到背景中让系统自行运行，对当前shell无影响<br>        -u： 后面+切换的用户名，无用户名则为root<br>        -l： sudo -l，用于显示当前用户可用sudo执行命令</p><h3 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h3><pre><code>Centos6.3 默认为Ext4     兼容Ext3            最大1EB文件系统和16TB文件    无限数量子目录    Extents 连续数据块概念    多块分配、延迟分配、持久项分配    快速FSCK、日志校验、无日志模式、在线碎片整理、inode增强、默认穷barrier等支持的文件系统                Ext：最早的文件系统    Ext2：1993年发布，最大支持16TB分区，2TB文件    Ext3：带日志功能    Ext4：上面以写    swap：交换分区，类似虚拟内存，当内存不够时，交换分区代替，必须分区    NFS： 网络文件系统Network File System，本地通过挂载使用远程共享的资源    iso9660：关盘的标准文件下体哦那个    fat： 类windows fatl6文件系统    vfat：类windows fat32文件系统 最大支持32G文曲和4G文件啊你    NTFS： windows 所有，2TB分区 64G文件    ufs：Sun公司系统Solaris SunOS采用的文件系统    proc：内存的虚拟文件系统，/proc    sysfs： =proc     tmpfs： 基于内存的虚拟文件系统，可使用swap交换分区</code></pre><p>df：查看文件系统硬盘使用情况<br>    df 选项 目录或文件名<br>        -a：显示所有系统信息<br>        -m: 以MB显示容量<br>        -k：以KB显示<br>        -h: 以KB、MB、GB等自行显示<br>        -T：显示分区的文件系统名称<br>        -i: 不用硬盘容量显示，以含有inode的数量显示<br>du: 统计目录或文件所占磁盘空间大小<br>    du 选项 目录或文件名<br>        -a： 显示每个子文件的磁盘占用量，默认统计子目录的磁盘占用量<br>        -h: 人性化显示磁盘占用量<br>        -s： 统计总磁盘占用量，不列出子目录和子文件的磁盘占用量</p><p>mount： 挂载Linux系统外的文件<br>    mount<br>        -l：mount显示系统已挂载的设备信息， -l 额外显示卷标名称<br>        -a： 自动检查 /etc/fstab 文件中有无疏漏被挂载的设备文件，有，则自动挂载。开机主动读取/etc/fstab 文件中的内容<br>    mount -t系统类型 -L卷标名 -o特殊选项 -n设备文件名挂载点<br>        -t：系统类型，指欲挂载的文件系统类型：Ext2、Ext3、Ext4等<br>        -L: 卷标名 利用文件系统的卷标名称进行挂载<br>        -n：系统将实际挂载的情况写入 /etc/mtab 文件中。若不写入，使用此选项<br>        -o：特殊选项：可指定挂载的额外选项，如读写权限、同步异步</p><p>umount：卸载文件系统<br>    umount 设备文件名或挂载点</p><p>fsck：检测和修复文件系统<br>    fsck 选项 分区设备文件名<br>        -a: 自动修复，不提示<br>        -r: 互助的修复模式，会询问<br>        -A： 按照/etc/fstab 配置文件的内容，检查文件内罗列的全部文件系统<br>        -t 文件系统类型： 指定要检查的文件系统类型<br>        -C： 显示检查分区的进度条<br>        -f： 强制检测<br>        -y： 自动修复=-a，但有些文件系统只支持-y</p><p>dumpe2fs：查看文件系统信息<br>    dumpe2fs -h 文件名<br>        -h： 仅列出superblock(超级块)的数据信息</p><p>fdisk： 给硬盘分区<br>    fdisk -l    ：列出系统分区 最高支持2TB的硬盘分区<br>    fdisk 设备文件名<br>    创建分区</p><p>parted：创建分区<br>    parted 硬盘设备文件名<br>        具体操作见 交互命令</p><p>mkfs： 格式化分区(为分区写入文件系统)<br>    mkfs -t 文件系统格式 分区设备文件名</p><p>mke2fs：格式化硬盘(给硬盘写入文件系统)<br>    mke2fs 选项 分区设备文件名<br>        -t    文件系统： 指定格式化为如： ext2、ext3、ext4<br>        -b 字节：指定block大小<br>        -i 字节：指定字节 inode 的比例<br>        -j： 建立带有ext3 日志功能的文件系统<br>        -L 卷标名： 给文件系统设置卷标名</p><p>swap： 分区及作用<br>    交换分区<br>    建立swap分区的步骤<br>        1. 分区    fdisk或parted<br>        2. 格式化    mkswap 格式化为 swap分区<br>        3. 使用swap分区<br>            分区：fdisk /dev/sdb<br>            格式化： mkswap /dev/sdb1<br>            使用： 加入swap分区 swapon 分区设备文件名</p><h3 id="高级文件系统管理"><a href="#高级文件系统管理" class="headerlink" title="高级文件系统管理"></a>高级文件系统管理</h3><pre><code>磁盘配额、 LVM(逻辑卷管理)、 RAID(磁盘阵列)    磁盘配额：限制普通用户在分区中使用的容量和文件个数    LVM： 在不停机和不损失数据的情况下修改分区带线啊哦    RAID：有多块硬盘或分区组成，拥有数据冗余功能，在某块硬盘或分区损坏时，硬盘或分区保存的数据不丢失</code></pre><p>磁盘配额<br>    Linux系统中限制特定的普通用户或用户组在指定的分区上占用的磁盘空间或文件个数<br>    满足磁盘配额的条件：<br>        1. 内核支持                grep CONFIG_QUOTA /boot/conrrfig-2…el6.i686<br>        2. 安装Quota工具        rpm -qa | grep quota<br>        3. 支持磁盘配额的分区必须开启磁盘配额功能<br>    常见概念<br>        用户配额和组配额<br>        磁盘容量限制和文件个数限制<br>        软限制和硬限制<br>        宽限时间<br>    磁盘配额启动的前期准备(设置挂载参数usrquota和grpquota)<br>        添加方式：<br>            1. 手动添加挂载参数：<br>                mount -o remout,usrquota,grpquota /home<br>                mount | grep home<br>            2. 修改/etc/fstab文件。将挂载参数写入配置中<br>                vi /etc/fstab<br>                    LABEL = /home    /home   ext3   defaults.usrquota,grpquota  1  2<br>                umount /home<br>                mount -a<br>                mount | grep home</p><p>quotacheck：扫描文件系统并建立Quota记录文件<br>    quotacheck [-avugfM] 文件系统<br>        -a：扫描所有在/etc/mtab 中含有quota支持的filesystem，此参数后边的文件系统可不写<br>        -u：针对使用者扫描文件与目录的使用情况，会创建 aquota.user<br>        -g：针对群组扫描文件与目录的使用情况，会创建aquota.group<br>        -v：显示扫描的详细过程<br>        -f：强制扫描文件系统，并写入新的quota记录文件<br>        -M：强制以读写的方式扫描文件系统，特殊情况下使用</p><p>quotaon：开始磁盘配额限制<br>    quotaon [-avug]<br>    quotaon [-vug] 文件系统名称<br>        -a：根据/etc/mtab 文件中对文件系统的配置，启动相关的Quota服务<br>        -u：针对用户启动Quota<br>        -g：针对群组启动Quota<br>        -v：显示启动服务过程的详细信息</p><p>quotaoff：关闭磁盘配额限制<br>    quotaoff [-avug]<br>    quotaoff [-vug] 文件系统名称<br>        -a：根据/etc/mtab 文件，关闭已启动的Quota服务，如不使用-a选项，则后面需要明确协商特定的文件系统名称<br>        -u：关闭针对用户启动的Quota服务<br>        -g：关系针对群组启动的Quota服务<br>        -v：显示服务过程的详细信息</p><p>edquota：修改用户(群组)的磁盘配额<br>    edquota [-u用户名] [-g群组名]<br>    edquota -t<br>    edquota -p 源用户名 -u 新用户名<br>        -u 用户名：进入配额的Vi编辑界面，修改针对用户的配置值<br>        -g 群组名：修改针对群组的配置值<br>        -t：       修改配额参数中的宽限时间<br>        -p：       将源用户(或群组)的磁盘配额设置，复制给其他用户(或群组)<br>    edquota 命令配额限制信息<br>        文件系统 filesystem：针对哪个文件系统或分区<br>        磁盘容量 blocks： quota自己算的，单位为Kbytes，不要手动修改<br>        磁盘容量的软限制 soft： 超过此限制值，登陆时会收到警告信息<br>        磁盘容量的硬显示 hard： 要求用户使用的磁盘空间不超此限制值，单位为KB<br>        文件数量 inodes：  当文件数量超过此值，会发出警告<br>        文件数量的硬限制 hard： 用户拥有的文件数量不超此值</p><p>setquota：非交互式设置磁盘配额<br>    setquota -u 用户名 容量软限制 容量硬限制 个数软限制 个数硬限制 分区名</p><p>quota和repquota查询磁盘配额方法<br>    quota 查询用户或用户组的配额<br>        quota 选项 用户名或组名<br>            -u 用户名： 查询用户配额<br>            -g 组名 ：    查询组配额<br>            -v： 显示详细信息<br>            -s： 以习惯单位显示容量大小 如 M、G<br>    repquota 查询整个分区的配额情况<br>        repquota 选项  分区名<br>            -a： 依据/etc/mtab 文件查询配额，如不加-a，就得加分区名<br>            -u： 查询用户配额<br>            -g： 查询组配额<br>            -v： 显示详细信息<br>            -s： 以易读单位显示容量大小</p><h3 id="LVM逻辑卷管理机制-硬盘分区管理机制"><a href="#LVM逻辑卷管理机制-硬盘分区管理机制" class="headerlink" title="LVM逻辑卷管理机制(硬盘分区管理机制)"></a>LVM逻辑卷管理机制(硬盘分区管理机制)</h3><pre><code>LVM：Logical Volume Manager，逻辑卷管理，Linux下对硬盘分区的一种管理机制    物理卷(Physical Volume, PV)：真正的物理硬盘或分区    卷组(Volume Group, VG)：将多个物理卷组成了卷组，把卷组想象为一块逻辑硬盘    逻辑卷(Logical Volume, LV)：逻辑卷可被格式化和写入数据，可想象为分区    物理扩展(Physical Extend,PE)：PE保存数据的最小单元，默认是4MB建立LVM的步骤：    1. 把物理硬盘分成分区    2. 把物理分区建立为物理卷PV    3. 把物理卷整合为卷组VG    4. 把卷组划分为逻辑卷LV</code></pre><p>PV物理卷：创建、查看、删除<br>    1. 建立所需的物理分区，方式使用fdisk交互命令<br>    建立物理卷；<br>        pvcreate 设备文件名<br>    查看物理卷：<br>        pvscan<br>        pvdisplay<br>    删除物理卷：<br>        pvremove /dev/sdb7</p><p>VG卷组：创建、激活、查看、扩容、减小、删除<br>    建立卷组：<br>        vgcreate [-s PE 大小] 卷组名 物理卷名<br>    激活卷组：<br>        激活：vgchange -a y 卷组名<br>        停用：vgchange -a n 卷组名<br>    查看卷组：<br>        vgscan ： 查看系统中是否有卷组<br>        vgdisplay： 查看卷组的详细状态<br>    增加卷组容量：<br>        vgextend scvg /dev/sdb7<br>    减少卷组容量：<br>        vgreduce  scvg /dev/sdb7<br>    删除卷组：<br>        vgremove scvg </p><p>LV逻辑卷：创建、查看、调整大小、删除<br>    建立逻辑卷：<br>        lvcreate 选项 -n 逻辑卷名 卷组名<br>            -L：容量，逻辑大小，单位为MB、GB、TB<br>            -l：个数，按照PE个数指定逻辑大小<br>            -n：逻辑卷名<br>    查看逻辑卷：<br>        lvscan        ： 查看系统中是否拥有逻辑卷<br>        lvdisplay    ： 查看逻辑卷的详细信息<br>    调整逻辑卷大小：<br>        lvresie 选项 逻辑卷的设备文件名<br>            -L: 容量<br>            -l: 个数<br>    删除逻辑卷：<br>        lvremove 逻辑卷的设备文件名<br>LVM(逻辑卷管理) 删除</p><p>RAID(磁盘列阵)</p><p>图形界面配置RAID</p><p>mdadm配置RAID</p><h3 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">启动流程：</span><br><span class="line">Upstart 启动服务 取代了 System V init</span><br><span class="line">1. 服务器加点，加载BIOS信息，BIOS进行系统检测，依照BIOS设定，找到第一个可以启动的设备(硬盘)</span><br><span class="line">2. 读取第一个启动设备的MBR(主引导记录)，加载MBR中的Boot Loader(启动引导程序，最常见为GRUB)</span><br><span class="line">3. 依照Boot Loader的设置加载内核，内核再进行一遍系统检测，系统一般会采用内核检测硬件的信息，而不一定采用BIOS的自检信息。内核再检测硬件的同时，还会通过加载动态模板的形式加载硬件的驱动</span><br><span class="line">4. 内核启动系统的第一进程，也就是 /sbin/init</span><br><span class="line">5. 由 /sbin/init 进程调用 /etc/init/rcS.conf 配置文件，通过这个配置调用/etc/rc.d/rc.sysint 配置文件。 而/etc/rc.d/rc.sysinit 配置文件是用来进行系统初始化的，主要用于配置计算机的初始化环境</span><br><span class="line">6. 通过/etc/init/rcS.conf 配置文件调用 /etc/inittab 配置文件。 通过 /etc/inittab 配置文件来确定系统的默认运行级别</span><br><span class="line">7. 确定默认运行级别后，调用/etc/init/rc.conf 配置文件</span><br><span class="line">8. 通过/etc/init/rc.conf 配置文件调用并执行 /etc/rc.d/rc 脚本，并传入运行级别参数</span><br><span class="line">9. /etc/rc.d/rc 确定传入的运行级别，然后运行相应的运行级别目录 /etc/rc[0-6].d/ 中的脚本</span><br><span class="line">10. /etc/rc[0-6].d/ 目录中的脚本依据设定好的优先级一次启动和关闭</span><br><span class="line">11. 最后执行/etc/rc.d/rc.local 中的程序</span><br><span class="line">12. 如果是字符界面启动，就可以看到登陆界面，如是图形界面启动，则调用相应的X Window 接口</span><br><span class="line">归纳：BIOS自检 -&gt; 启动GRUB -&gt; 加载内核 -&gt; 执行第一个进程 -&gt; 配置系统初始环境 </span><br><span class="line"></span><br><span class="line">BIOS 开机自检</span><br><span class="line">通电后，进入BIOS： Basic Input/Ouput System 基本输入/输出系统</span><br><span class="line">BIOS初始化的工作：</span><br><span class="line">1. 检查硬件和外围设备， CPU、内存、风扇灯。 自建过程称为 POST(Power On Self Test)</span><br><span class="line">2. 对硬件进行初始化，规定当前启动设备的先后顺序，选择由哪个设备来开机</span><br><span class="line">3. 选择好开机设备后，会从该设备的MBR(主引导目录)读取Boot Loader(启动引导程序)并执行，启动引导程序用于引导操作系统启动，Linux系统默认使用GRUB</span><br><span class="line">当MBR被加载到RAM之后，BIOS将控制权交给RAM，进入系统第二阶段</span><br><span class="line">[MBR](http://c.biancheng.net/uploads/allimg/181022/2-1Q0221G321149.jpg)</span><br><span class="line">启动引导程序的作用：</span><br><span class="line">BIOS作用是自检，从MBR读取启动引导程序。</span><br><span class="line">启动引导程序作用：</span><br><span class="line">1. 加载操操作系统的内核</span><br><span class="line">2. 可选择的系统菜单，如双系统</span><br><span class="line">3. 调用其他的启动引导程序，多系统启动的关键</span><br><span class="line">[启动引导程序](http://c.biancheng.net/uploads/allimg/181022/2-1Q0221G60U34.jpg)</span><br><span class="line"></span><br><span class="line">Linux内核(内核模块)的加载过程</span><br><span class="line">内存存放位置： /boot 的启动目录中</span><br><span class="line">GRUB加载内核后，内核进行二次系统自检，内核替代BIOS接管Linux启动。</span><br><span class="line">内核完成后，采用动态方式加载每个硬件的模块，模块为硬件的驱动。</span><br><span class="line">initramfe虚拟文件系统</span><br><span class="line">通过initramfs虚拟文件系统再内存中模拟处一个根目录，然后加载SCSI等硬件驱动，可加载真正的跟目录，之后调用Linux的第一个进程/sbin/init</span><br><span class="line">优点：</span><br><span class="line">initramfs随着数据的增减自动增减容量</span><br><span class="line">再initramfas和页面缓存之间没有重复数据</span><br><span class="line">initramfs重复利用Linux caching的代码，没有增加内核尺寸</span><br><span class="line">不需要额外的文件系统驱动</span><br><span class="line">[](http://c.biancheng.net/uploads/allimg/181023/2-1Q023093PD60.jpg)</span><br><span class="line"></span><br><span class="line">Linux /sbin/init 初始化系统环境</span><br><span class="line">内核加载完，完成硬件检测与驱动程序加载后，内核主动呼叫第一个进程/sbin/init, 此配置主要功能准备软件执行的环境：主机名、网络设定、语言、文件系统格式及其他服务的启动</span><br><span class="line">/etc/rc.d/rc.sysinit 配置文件的工作：</span><br><span class="line">获得网络环境和主机类型</span><br><span class="line">测试设备：侦测系统上是否有usb设备，如有主动加载usb驱动程序，并挂载usb文件系统</span><br><span class="line">开机启动画面Plymouth</span><br><span class="line">判断是否启用SELinux</span><br><span class="line">显示开机过程的欢迎画面</span><br><span class="line">初始化硬件</span><br><span class="line">用户自定义模块的加载</span><br><span class="line">配置内核的参数</span><br><span class="line">设置主机名</span><br><span class="line">同步存储器</span><br><span class="line">设备映射器及相关的初始化</span><br><span class="line">初始化软件磁盘阵列(RAID)</span><br><span class="line">初始化LVM的文件系统功能</span><br><span class="line">检验磁盘文件系统(fsck)</span><br><span class="line">设置磁盘配置(quota)</span><br><span class="line">重新以可读写模式挂载系统磁盘</span><br><span class="line">更新quota(非必要)</span><br><span class="line">启动系统虚拟随机数生成器</span><br><span class="line">配置机器(非必要)</span><br><span class="line">清除开机过程中的临时文件</span><br><span class="line">创建ICE目录</span><br><span class="line">启动交换分区(swap)</span><br><span class="line">将开机信息写入 /var/log/dmesg 文件中</span><br><span class="line"></span><br><span class="line">Linux /etc/inittab：设置(修改)系统默认运行级别</span><br><span class="line">Linux有7个级别：</span><br><span class="line">0 ：关机</span><br><span class="line">1 ：单用户模式，类Windows安全模式，系统修复</span><br><span class="line">2 ：不完全的命令行模式，不含NFS服务</span><br><span class="line">3 ：完全的命令行模式，标准字符界面</span><br><span class="line">4 ：系统保留</span><br><span class="line">5 ：图形模式</span><br><span class="line">6 ：重新启动</span><br><span class="line">runlevel：查看系统的运行级别</span><br><span class="line">系统默认运行级别：/etc/inittab 配置文件功能：确定系统的默认运行级别，即开机进入哪个运行级别</span><br><span class="line"></span><br><span class="line">Linux /etc/rc.d/rc.local 配置文件</span><br><span class="line">在 /etc/rc[06].d/ 目录中的程序启动后，系统启动完成。</span><br><span class="line">[启动流程](http://c.biancheng.net/uploads/allimg/181023/2-1Q02310563a22.jpg)</span><br><span class="line"></span><br><span class="line">Linux 启动引导程序(GRUB)加载内核</span><br><span class="line">GRUB加载内核的过程</span><br><span class="line">加载操作系统的内核</span><br><span class="line">可选择的操作系统菜单</span><br><span class="line">调用其他启动引导程序，实现多系统引导</span><br><span class="line">1. 执行GRUB主引导</span><br><span class="line">1.5 识别不同的文件系统</span><br><span class="line">2. 加载GRUB的配置文件</span><br><span class="line"></span><br><span class="line">Linux /boot/grub/ 目录分</span><br><span class="line">1. 第一阶段启动引导的主程序</span><br><span class="line">2. 第二阶段为主程序加载配置文件，包括环境参数文件</span><br><span class="line"></span><br><span class="line">GRUB磁盘分区表示法</span><br><span class="line">ha：硬盘</span><br><span class="line">第一个0：系统查找到的第一块硬盘，第二块为1|2？</span><br><span class="line">第二个0：硬盘的第一个分区</span><br><span class="line">硬盘分区设备文件名GRUB设备文件名</span><br><span class="line">第一块SCSI硬盘</span><br><span class="line">[内容太多](http://c.biancheng.net/view/1030.html)</span><br><span class="line"></span><br><span class="line">/boot/grub/grub.conf(GRUB配置文件)内容</span><br><span class="line">[内容太多](http://c.biancheng.net/view/1032.html)</span><br><span class="line"></span><br><span class="line">多系统并存的GRUB配置文件内容分析</span><br><span class="line">[多系统](http://c.biancheng.net/view/1033.html)</span><br><span class="line"></span><br><span class="line">GRUB手动安装方法</span><br><span class="line">手动安装GRUB的情况</span><br><span class="line">1. 不使用GRUB作为引导程序，而想要GRUB作为引导程序</span><br><span class="line">2. MBR中的引导程序被覆盖，如安装linux后安windows，引导被覆盖</span><br><span class="line">步骤：</span><br><span class="line">1. 使用grul-install 命令 在启动分区安装GRUB相关文件</span><br><span class="line">2. 修改GRUB的配置文件</span><br><span class="line">3. 安装GRUB到/dev/sdb1分区的启动扇区中</span><br><span class="line"></span><br><span class="line">Linux GRUB加密方法</span><br><span class="line">启动选项按 e 进入编辑模式，通过命令grub-md5-crypt</span><br><span class="line">模式：</span><br><span class="line">1. 给每个启动菜单加密</span><br><span class="line">2. 给GRUB菜单整体加密</span><br><span class="line"></span><br><span class="line">字符界面调整分比率</span><br><span class="line">[文章](http://c.biancheng.net/view/1037.html)</span><br><span class="line"></span><br><span class="line">Linux内核模块管理(查看、添加、删除)</span><br><span class="line">模块：动态可加载内核模块，有独立功能的程序，可被单独编译，但不能独立运行</span><br><span class="line">安装模块的方法：</span><br><span class="line">1. 在编译内核时，手工调整内核模块功能，加入所需的模块</span><br><span class="line">2. 下载厂商发布的新硬件的驱动模块，或下载驱动程序，在编译</span><br><span class="line">内核模块保存位置与模块保存文件</span><br><span class="line">内核模块保存：</span><br><span class="line">/lib/modules/内核版本/kernel/目录中</span><br><span class="line">depmod 选项</span><br><span class="line">-a：扫描所有模块</span><br><span class="line">-A: 扫描新模块，有新模块，更新moudles.dep 文件</span><br><span class="line">-n：扫描结果不写入modules.dep 文件，直接输出到屏幕</span><br><span class="line">内核模块的查看：</span><br><span class="line">lsmod 命令指定结果：</span><br><span class="line">Module：模块名</span><br><span class="line">Size：模块大小</span><br><span class="line">Used by：模块是否被其他模块调用</span><br><span class="line">内核模块的添加与删除：</span><br><span class="line">modprobe 选项 模块名</span><br><span class="line">-l：列出所有模块的文件名，依赖modules.dep文件</span><br><span class="line">-f：强制加载模块</span><br><span class="line">-r：删除模块</span><br><span class="line"></span><br><span class="line">Linux NTFS文件系统安装</span><br><span class="line">方法有三：</span><br><span class="line">一. 重新编译内核</span><br><span class="line">二. 下载编译内核</span><br><span class="line">三. 第三方插件 NTFS-3G</span><br><span class="line">二. </span><br><span class="line">1.下载内核</span><br><span class="line">2.解压内核</span><br><span class="line">3.生成内核编译所需的.config文件</span><br><span class="line">4.编译模块</span><br><span class="line">5.模块安装</span><br><span class="line">三：</span><br><span class="line">1.下载NTFS-3G插件</span><br><span class="line">2.安装NTFS-3G插件</span><br><span class="line"></span><br><span class="line">Linux单用户模块(修改密码、运行级别)方法</span><br><span class="line">如何进入单用户模式：</span><br><span class="line">开机、e 进入GRUB</span><br><span class="line">kernel、e 进入编辑界面，然后输入 空格 single，代表启动单用户模式</span><br><span class="line">单用户模式常见错误修复：</span><br><span class="line">root密码:</span><br><span class="line">单用户模式、passwd root</span><br><span class="line">修改系统默认运行级别：</span><br><span class="line">直接修改配置文件/etc/inittab. 系统的默认运行级别只能使用3或5</span><br><span class="line"></span><br><span class="line">光盘修复模式使用方法：</span><br><span class="line">[光盘修复](http://c.biancheng.net/view/1042.html)</span><br><span class="line"></span><br><span class="line">Linux系统安全性分析</span><br><span class="line">[密码安全](http://c.biancheng.net/uploads/allimg/181024/2-1Q024111633X7.jpg)</span><br></pre></td></tr></table></figure><h3 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h3><pre><code>服务是后台运行的应用程序，提供本地系统或网络的功能，Service，Daemon：守护神、守护进程守护进程：为了实现服务、功能的进程，是服务在后台运行的真实进程系统服务及分类    [服务分类](http://c.biancheng.net/uploads/allimg/181024/2-1Q02413195AP.jpg)软件安装方式：1. RPM包         2. 源码包服务分为两种：    独立的服务：可自动启动，不依赖管理服务，如 Nginx服务、FTP服务等    基于Xinetd的服务：依靠管理服务来调用，管理服务是xinetd服务，是系统的超级守护进程，作用：管理不能独立启动的服务，当有客户端请求时，先请求xinetd服务，由xinetd服务去唤醒相对应的服务。</code></pre><p>查询已安装的服务与区分服务<br>    RPM包默认安装到系统默认位置，可被服务管理命令(service、chkconfig)识别<br>    chkconfig –list 服务名        //    管理RPM包默认安装服务的自启动命令，列出所有服务的自启动状态</p><p>Linux端口及查询方法<br>    协议：<br>        面向连接的可靠的TCP协议(Transmission Control Protocol,传输控制协议)<br>        面向无连接的不可靠的UDP协议(User Datagram Protocol, 用户数据报协议)<br>    查询系统中已启动的服务：<br>        netstat 选项<br>            -a： 列出系统中所有网络连接，包括：网络服务、监听的网络服务、Socket套接字<br>            -t： 列出TCP 数据<br>            -u： 列出UDP 数据<br>            -l： 列出正在监听的网络服务(不包含已连接的网络服务)<br>            -n： 用端口号来显示而不用服务名<br>            -p： 列出该服务的进程ID(PID)<br>    执行结果字段解析：<br>        Proto： 数据包的协议<br>        Revc-Q：收到的数据已在本地接受缓冲<br>        Send-Q：对方没有收到的数据包数量<br>        Local Address：本地IP：端口，通过端口知道本机开启的服务<br>        Foreign Address：远程主机：端口，<br>        State： 连接状态，已建立连接(ESTABLISED)和监听(LISTEN)<br>        PID/Program name: 进程ID和进程命令<br>    Socket套接字的解析：<br>        Proto：协议，一般是Unix<br>        RefCnt： 连接到此Socket的进程数量<br>        Flags：连接标识<br>        Type： Socket访问类型<br>        State：状态 Listening：监听    Connected：已建立连接<br>        l-Node：程序文件的i节点号<br>        Path：Socket程序的路径、或者相关数据的输出路径</p><p>独立服务的启动管理(RPM包的启动与自启动)<br>    两种方式：<br>        1. 使用/etc/init.d/ 目录中的启动脚本来启动独立的服务<br>            /etc/init.d/独立服务名 start|stop|status|restart|…<br>                start：启动服务<br>                stop ：停止服务<br>                status：服务状态<br>                restart：重启服务<br>        2. 使用service命令来启动独立的服务<br>            service 只是一个脚本，调用/etc/init.d/ 中的启动脚本来启动独立服务<br>            service 独立服务名 start|stop|restart|…<br>                –status-all :列出所有独立服务的启动状态<br>独立服务的自启动管理<br>    三种方式：<br>        1. 使用chkconfig服务自启动管理命令<br>            chkconfig –list    // 查询自启动状态<br>                chkconfig –list | grep nginx<br>            chkconfig [–level 运行级别][独立服务名][on|off]<br>                –level：设定在哪个运行级别中开机自启动(on)，关闭自启动(off)<br>                chkconfig –level 2345 nginx on        // 修改2345这4个级别为启用<br>            /etc/init.d/nginx status    //    查看服务状态<br>        2. 修改 /etc/rc.d/rc.local 文件，设置服务自启动<br>            修改 rc.local 文件，添加服务的启动命令，注：/etc/rc.d/rc.local 和 /etc/rc.local 文件时软连接，修改哪个都可以，这个文件中的命令会在启动时调用<br>            vi /etc/rc.d/rc.local<br>                /etc/rc.d/init.d/nginx start<br>                # 在文件中加入nginx的启动命令<br>            好处：<br>                1. 集中管理<br>                2. 服务启动唯一性，不管哪种方式都通过 /etc/rc.d/rc.local 文件实现<br>        3. 使用ntsysv 命令管理自启动<br>            ntsysv：调用窗口模式管理服务的自启动<br>            ntsysv [–level 运行级别]<br>                ntsysv –level 234<br>                # 设定234级别的服务自启动</p><p>Linux基于xinetd服务的管理方法<br>    基于xinetd服务的启动<br>        xinetd 服务的配置文件保存在 /etc/xinetd.d/ 目录中<br>            telnet： /etc/xinetd.d/telnet<br>            如果要启动telnet服务，只需把 /etc/xinetd.d/telnet 文件中的disable=yes 改为 disable=no    ，disable:代表取消<br>    基于xinetd服务的自启动<br>        1. 使用chkconfig 命令管理自启动<br>            chkconfig 服务名 on|off<br>        2. 使用ntsysv命令管理自启动</p><p>Linux源码包服务管理(启动与自启动)<br>    源码包服务的启动管理：<br>        /usr/local/apache2/bin/apachectl start|stop|restart|status|…<br>    源码包服务的自启动管理：<br>        vim /etc/rc.d/rc.local            // 修改自启动文件<br>            touch /var/lock/subsys/local /usr/local/apache2/bin/apachectl start<br>            # 加入源码包服务的标准启动命令<br>    让源码包服务被服务管理命令识别：<br>        1. 卸载RPM包默认安装的apache服务<br>            yum -y remove httpd<br>        2. 安装源码包的apache服务，并启动<br>            /usr/local/apache2/bin/apachectl start<br>            netst -tlun | grep 80<br>        3. 让源码包安装的apache服务能被service命令管理启动<br>            ln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache<br>            # 把源码包的启动脚本连接到 /etc/init.d/目录中，能被service命令管理<br>        4. 让源码包安装的apache服务能被chkconfig命令管理自启动<br>            vi /etc/init.d/apache<br>                # 修改源码包安装的apache服务的启动脚本，此文件是软连接，实际修改的是源码包的启动脚本<br>                chkconfig: 运行级别 启动顺序 关闭顺序<br>            chkconfig –add apache<br>            chkconfig –list | grep apache<br>        5. 让ntsysv命令可以管理源码包安装的apache服务<br>                把服务的启动脚本链接到/etc/init.d/目录中，在启动脚本中加入：<br>                #chkconfig:运行级别 启动顺序 关闭<br>                #description:说明<br>                然后使用： chkconfig –add 服务名<br>                    chkconfig 选项服务名<br>                        -add： 把服务加入chkconfig命令的管理中<br>                        -del： 把服务从chkconfig命令的管理中删除<br>                        chkconfig -del|httpd</p><p>Linux常见服务类被及功能<br>    acpid：    电源管理接口<br>    anacron：    系统的定时任务，是cron的子系统<br>    alsasound： alsa声卡驱动<br>    apmd：    电源管理模块<br>    atd：指定系统在特定时间执行某个任务，只能执行一次<br>    auditd：审核子系统<br>    autofs：让服务器可自动挂载网络中其服务器的共享数据，挂载NFS服务<br>    avahi-daemon：avahi是zeroconf协议的实现<br>    bluetooth：蓝牙设备支持<br>    capi：仅对ISND设备用户有用<br>    chargen-dgram：使用UDP协议的chargen server，类远程打字功能<br>    chargen-stream： 同上<br>    cpuspeed：调整CPU频率<br>    crond：系统定时任务<br>    cvs：版本控制系统<br>    … More<br>    <a href="http://c.biancheng.net/view/1059.html" target="_blank" rel="noopener">常见服务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; Linux &lt;/center&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Linux/Ubuntu/"/>
    
      <category term="Centos" scheme="http://yoursite.com/categories/Linux/Ubuntu/Centos/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP</title>
    <link href="http://yoursite.com/2019/08/09/PHP-Note/"/>
    <id>http://yoursite.com/2019/08/09/PHP-Note/</id>
    <published>2019-08-09T10:58:59.000Z</published>
    <updated>2019-08-11T07:03:06.536Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a><h3 id="TODO-List"><a href="#TODO-List" class="headerlink" title="TODO List"></a>TODO List</h3><p>PHP基础<br>PHP进阶<br>PHP高阶<br>More…</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
      <category term="Laravel" scheme="http://yoursite.com/categories/PHP/Laravel/"/>
    
      <category term="ThinkPHP" scheme="http://yoursite.com/categories/PHP/Laravel/ThinkPHP/"/>
    
      <category term="Yii" scheme="http://yoursite.com/categories/PHP/Laravel/ThinkPHP/Yii/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="http://yoursite.com/2019/08/09/Vim-Note/"/>
    <id>http://yoursite.com/2019/08/09/Vim-Note/</id>
    <published>2019-08-09T10:58:51.000Z</published>
    <updated>2019-08-16T13:53:01.574Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a><h3 id="6-种模式"><a href="#6-种模式" class="headerlink" title="6 种模式"></a>6 种模式</h3><p>普通模式    插入模式    可视模式    选择模式    命令行模式        Ex模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- 普通模式</span><br><span class="line">dd </span><br><span class="line">ndd </span><br><span class="line">dj</span><br><span class="line">dG</span><br><span class="line">dgg</span><br><span class="line">db </span><br><span class="line">dw</span><br><span class="line"></span><br><span class="line">- 插入模式</span><br><span class="line">i </span><br><span class="line">I </span><br><span class="line">a</span><br><span class="line">A</span><br><span class="line">x</span><br><span class="line">X</span><br><span class="line">s</span><br><span class="line">S</span><br><span class="line"></span><br><span class="line">- 可视模式</span><br><span class="line">与普通模式相似</span><br><span class="line"></span><br><span class="line">- 选择模式</span><br><span class="line">Ctrl + v</span><br><span class="line">Shift + v</span><br><span class="line"></span><br><span class="line">- 命令行模式</span><br><span class="line">:：执行命令</span><br><span class="line">/：搜索</span><br><span class="line">?：搜索</span><br><span class="line">!：过滤命令</span><br><span class="line"></span><br><span class="line">- Ex模式</span><br><span class="line">与命令行模式相似，在使用 :visual 命令离开Ex模式前，可一次执行多条命令</span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = x.x</span><br><span class="line">-r x.x:</span><br><span class="line">-R x.x:</span><br><span class="line">+ x.x:</span><br><span class="line">+n x.x:</span><br><span class="line">+ /pattern x.x:</span><br><span class="line">-c command x.x</span><br></pre></td></tr></table></figure><h3 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">i:光标所在处插入</span><br><span class="line">I:所在行的第一个非空格符处开始插入</span><br><span class="line">o:光标所在行的下一行输入新的一行</span><br><span class="line">O:  光标所在行的上一行输入新的一行</span><br><span class="line">a:光标所在的下一个字符处开始输入</span><br><span class="line">A:光标所在行的最后一个字符处开始输入</span><br><span class="line">r:取代光标所在的那个一字符一次</span><br><span class="line">R:取代光标所在的文字，直到按下 ESC为止</span><br><span class="line"></span><br><span class="line">查找文本</span><br><span class="line">/abc:</span><br><span class="line">/^abc:</span><br><span class="line">/abc$:</span><br><span class="line">?abc:</span><br><span class="line">n:</span><br><span class="line">N:</span><br><span class="line"></span><br><span class="line">替换文本</span><br><span class="line">r:</span><br><span class="line">R:</span><br><span class="line">:s/x/x1/g:</span><br><span class="line">:x1,x2s/y1/y2/g:</span><br><span class="line">:g/x1/x2/g</span><br><span class="line"></span><br><span class="line">删除文本</span><br><span class="line">x: 向后删除一个字符X: 向前删除一个字符nx：连续向后删除n个字符</span><br><span class="line">dd:删除光标所在的一整行</span><br><span class="line">ndd: 删除光标所在的向下n行</span><br><span class="line">dG: 删除光标所在到最后一行的所有数据</span><br><span class="line">d$:删除光标所在处到最后一个字符</span><br><span class="line">d0:删除光标所在处到该行的最前面一个字符</span><br><span class="line">D:删除光标末尾的字符</span><br><span class="line">:x1,x2d</span><br><span class="line"></span><br><span class="line">p: 粘贴被删除的文本内容</span><br><span class="line"></span><br><span class="line">复制文本</span><br><span class="line">p: 粘贴通过复制下的行数和字符</span><br><span class="line">P: 会增加行数</span><br><span class="line">yy: 复制光标所在的那一行</span><br><span class="line">nyy: 复制光标所在的向下n行</span><br><span class="line">y1G: 复制光标所在行的第一行的所有数据</span><br><span class="line">y0:复制光标所在的那个字符到该行行首的所有数据</span><br><span class="line">y$: 复制光标所在的那个字符到该行行尾的所有数据</span><br><span class="line">yw: </span><br><span class="line">J:将光标所在行与下一行的数据结合成同一行</span><br><span class="line">c:重复删除多个数据</span><br><span class="line">u:  复原前一个动作</span><br><span class="line">Ctrl+r:重做上一个动作</span><br><span class="line"></span><br><span class="line">保存退出</span><br><span class="line">:wq保存并退出</span><br><span class="line">:wq! 强制保存并退出</span><br><span class="line">:q  离开vim</span><br><span class="line">:q! 强制退出不保存</span><br><span class="line">:w将文本保存</span><br><span class="line">:w!若文件为只读时，强制写入该档案。但取决于权限</span><br><span class="line">:w xxx.xx:  将编辑的数据保存成另一个档案，类似于另存</span><br><span class="line">:x! </span><br><span class="line">:n1,n2 w filename:将n1到n2的内容存储成filename这个档案</span><br><span class="line">ZZ: 文件没有改动，则不保存离开，若改动，则保存后离开</span><br><span class="line">:! command: 暂时离开vim到指令模式下执行命令</span><br></pre></td></tr></table></figure><h3 id="方向键"><a href="#方向键" class="headerlink" title="方向键"></a>方向键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">h:向左H:屏幕上方那一行的第一个字符</span><br><span class="line">j:向下M:屏幕中央那一行的第一个字符</span><br><span class="line">k:向上L:屏幕下方...</span><br><span class="line">l:向右G:移到档案的最后一行</span><br><span class="line">Ctrl + f:屏幕向下一页</span><br><span class="line">Ctrl + b:屏幕向上一页</span><br><span class="line">Ctrl + d:屏幕向下移动半页</span><br><span class="line">Ctrl + u:屏幕向上移动半页</span><br><span class="line">+:光标移动到非空格符的下一行</span><br><span class="line">-：光标移动到非空格符的上一行</span><br><span class="line">n&lt;space&gt;:n 表示数字，按下数字再按空格键</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">光标以单词位单位移动</span><br><span class="line">w|W:</span><br><span class="line">b|B:</span><br><span class="line">e|E:</span><br><span class="line">nw|nW:</span><br><span class="line">nb|nB:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">光标移动至行首或行尾</span><br><span class="line">0 | ^:光标移动到行首</span><br><span class="line">$:光标移动到行尾</span><br><span class="line">n$:</span><br><span class="line"></span><br><span class="line">光标移动到指定字符</span><br><span class="line">fx:</span><br><span class="line">Fx:</span><br><span class="line"></span><br><span class="line">光标移动到指定行</span><br><span class="line">gg:移到档案第一行</span><br><span class="line">G:移到档案最后一行</span><br><span class="line">nG:移动到档案的第n行</span><br><span class="line">:n:光标向下移动n行</span><br><span class="line"></span><br><span class="line">光标移动到匹配的括号处</span><br><span class="line">%: 将光标先定位到 &quot;&#123;&quot; ,然后再使用 &quot; % &quot; 命令，可定位到 &quot; &#125; &quot; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">批量注释和自定义注释快捷键</span><br><span class="line">s/^/#/g:</span><br><span class="line">eg: :1,10s/^/#/g:</span><br><span class="line"></span><br><span class="line">取消连续行注释</span><br><span class="line">:1,10s/^#//g:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:map 快捷键 执行命令</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/813.html" target="_blank" rel="noopener">Vim map </a></p><p><a href="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" target="_blank" rel="noopener">Vim</a></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="Vim" scheme="http://yoursite.com/categories/Vim/"/>
    
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2019/08/09/Git-Note/"/>
    <id>http://yoursite.com/2019/08/09/Git-Note/</id>
    <published>2019-08-09T10:58:44.000Z</published>
    <updated>2019-08-11T07:02:45.761Z</updated>
    
    <content type="html"><![CDATA[<center> iFaithFreedom </center><a id="more"></a> <h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h3 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h3><p>两种场景：</p><h4 id="1-把已有的项目代码纳入Git管理"><a href="#1-把已有的项目代码纳入Git管理" class="headerlink" title="1. 把已有的项目代码纳入Git管理"></a>1. 把已有的项目代码纳入Git管理</h4><p>cd 项目代码所在的文件夹<br>git init</p><h4 id="2-新建的项目直接用Git管理"><a href="#2-新建的项目直接用Git管理" class="headerlink" title="2. 新建的项目直接用Git管理"></a>2. 新建的项目直接用Git管理</h4><p>cd 某个文件夹<br>git init your_project    # 会在当前路径下创建和项目名称同名的文件夹<br>cd your_project</p><h3 id="Git-分离头指针"><a href="#Git-分离头指针" class="headerlink" title="Git 分离头指针"></a>Git 分离头指针</h3><pre><code>在没有绑定分支的情况下，git status 会显示 HEAD， 后面需要 git branch xxx head_id    如果没有保存，会被当作垃圾清理掉</code></pre><h3 id="HEAD-branch"><a href="#HEAD-branch" class="headerlink" title="HEAD  branch"></a>HEAD  branch</h3><pre><code>git checkout -b xxx yyy                 // 基于yyy 创建 xxx 分支HEAD 可脱离分支，独立存在</code></pre><p>git diff        // 比较两个commit 的不同        git diff HEAD HEAD^ | HEAD～n</p><h3 id="查看不同提交的指定文件的差异"><a href="#查看不同提交的指定文件的差异" class="headerlink" title="查看不同提交的指定文件的差异"></a>查看不同提交的指定文件的差异</h3><pre><code>git diff 分支1 分支2 -- 文件            //      比较不同分支的差异git diff 分支指针1 分支指针2 -- 文件     // 用分支比较文件的差异</code></pre><h3 id="正确删除文件的方法"><a href="#正确删除文件的方法" class="headerlink" title="正确删除文件的方法"></a>正确删除文件的方法</h3><pre><code>git rm xxx                      //      删除xxx 文件</code></pre><h3 id="开发中临时加塞了紧急任务的处理方法"><a href="#开发中临时加塞了紧急任务的处理方法" class="headerlink" title="开发中临时加塞了紧急任务的处理方法"></a>开发中临时加塞了紧急任务的处理方法</h3><pre><code>git stash                       // 把现在做的工作任务存放到不影响接下来要做的工作环境中去git stash list          //      查看所有的stash 任务的列表git statusgit stash apply         //      弹出最新的stash， 不保留stash 的任务git stash pop           //      弹出最新的stash 工作，存放起来的任务还在</code></pre><h3 id="指定不需要Git管理的文件"><a href="#指定不需要Git管理的文件" class="headerlink" title="指定不需要Git管理的文件"></a>指定不需要Git管理的文件</h3><pre><code>.gitignore                      // 文件中添加不需要被提交的文件类型</code></pre><h3 id="将Git仓库备份到本地"><a href="#将Git仓库备份到本地" class="headerlink" title="将Git仓库备份到本地"></a>将Git仓库备份到本地</h3><pre><code>git clone --bare        // 不在工作区的仓库哑协议： git clone --bare 本地仓库.git  新建仓库name.git</code></pre><h3 id="添加公钥到Github-SSH-and-GPG-keys"><a href="#添加公钥到Github-SSH-and-GPG-keys" class="headerlink" title="添加公钥到Github SSH and GPG keys"></a>添加公钥到Github SSH and GPG keys</h3><h3 id="在Github-创建个人仓库"><a href="#在Github-创建个人仓库" class="headerlink" title="在Github 创建个人仓库"></a>在Github 创建个人仓库</h3><h3 id="把本地仓库同步到Github"><a href="#把本地仓库同步到Github" class="headerlink" title="把本地仓库同步到Github"></a>把本地仓库同步到Github</h3><pre><code>git remote add xxx git@github.com:aspire_8/xxx.git              // 新增远程Github仓库git remote remove xxx                           //      删除远程Github仓库git remote rename oldName newName                               // 更改远程Github仓库的名称git push xxx -all               // 提交本地所有分支到远端</code></pre><h4 id="一般出错的情况"><a href="#一般出错的情况" class="headerlink" title="一般出错的情况"></a>一般出错的情况</h4><pre><code>在推送前，需要先 拉取 远程仓库到本地git pull                //      拉取远程到本地并且合并，等同于 git fetch + git mergegit fetch               // 仅仅把远端的拉到本地git merge 远端分支/本地分支(master)             // 合并分支</code></pre><h4 id="把不相干的两个分支合并"><a href="#把不相干的两个分支合并" class="headerlink" title="把不相干的两个分支合并"></a>把不相干的两个分支合并</h4><pre><code>git merge --allow-unrelater-histories 远端仓库/本地仓库</code></pre><h3 id="不同人修改了同文件的不同区域的处理方案"><a href="#不同人修改了同文件的不同区域的处理方案" class="headerlink" title="不同人修改了同文件的不同区域的处理方案"></a>不同人修改了同文件的不同区域的处理方案</h3><pre><code>git push</code></pre><h3 id="不同人修改了同文件的同一区域的处理方案"><a href="#不同人修改了同文件的同一区域的处理方案" class="headerlink" title="不同人修改了同文件的同一区域的处理方案"></a>不同人修改了同文件的同一区域的处理方案</h3><pre><code>global: git pull        vim xxx.xx              git pushlocal : git pull        vim xxx.xx              git push会出错，local没办法提交，解决方案vim xxx.xx              //      把修改的同一地方，删除其中一个人的修改，删除git的提示信息git status              -&gt;              git commit -am &apos;解决冲突&apos;  -&gt;  git push</code></pre><h3 id="同时变更了文件名和文件内容的处理方案"><a href="#同时变更了文件名和文件内容的处理方案" class="headerlink" title="同时变更了文件名和文件内容的处理方案"></a>同时变更了文件名和文件内容的处理方案</h3><pre><code>global 在更改同一文件名和内容之后local  在本地修改文件内容， git pull 的时候，git会弹出界面提示修改的信息，同时也会在被更改</code></pre><p>文件中，添加local修改的内容</p><h3 id="把同一文件改成不同文件名的处理方案"><a href="#把同一文件改成不同文件名的处理方案" class="headerlink" title="把同一文件改成不同文件名的处理方案"></a>把同一文件改成不同文件名的处理方案</h3><pre><code>global: 修改xxx.xx 为 xxxa.xx，local:  修改  xxx.xx 为 xxb.xxglobal: git push                local: git pull , git rm xxx.xx, git rm xxa.xx, git add xxb.xx, git commit -m &apos;delete xxx.xx xxa.xx&apos;      git push</code></pre><h3 id="禁止向集成分支执行push-f-操作"><a href="#禁止向集成分支执行push-f-操作" class="headerlink" title="禁止向集成分支执行push -f 操作"></a>禁止向集成分支执行push -f 操作</h3><pre><code>git push -f示例:        git log --oneline                               // 查看历史日志        git reset --hard commitID               // 在本地使用reset 恢复到 任意一个commit的历史，如</code></pre><p>果使用 -f 提交的话，远程仓库所有被提交的commit之前的改动都会被删除掉，很危险！！！</p><h3 id="禁止向集成分支执行变更历史的操作"><a href="#禁止向集成分支执行变更历史的操作" class="headerlink" title="禁止向集成分支执行变更历史的操作"></a>禁止向集成分支执行变更历史的操作</h3>]]></content>
    
    <summary type="html">
    
      &lt;center&gt; iFaithFreedom &lt;/center&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>生活日记</title>
    <link href="http://yoursite.com/2019/08/08/Life-Note/"/>
    <id>http://yoursite.com/2019/08/08/Life-Note/</id>
    <published>2019-08-07T18:15:28.000Z</published>
    <updated>2019-08-16T14:00:03.945Z</updated>
    
    <content type="html"><![CDATA[<p>记： 七夕节，回家做晚饭，吃完饭大概八点多，躺了一会，出去散了个步，回到家十点半，洗了个澡，十一点。<br>然后闲着无聊，开始着手部署博客项目。到现在是8.8号凌晨 两点多。阿哈，真累！</p><p>以后要养成记笔记的习惯，哈哈，不然学会的东西很快就会忘记的额～！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记： 七夕节，回家做晚饭，吃完饭大概八点多，躺了一会，出去散了个步，回到家十点半，洗了个澡，十一点。&lt;br&gt;然后闲着无聊，开始着手部署博客项目。到现在是8.8号凌晨 两点多。阿哈，真累！&lt;/p&gt;
&lt;p&gt;以后要养成记笔记的习惯，哈哈，不然学会的东西很快就会忘记的额～！&lt;/p&gt;
      
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
      <category term="Year" scheme="http://yoursite.com/categories/Life/Year/"/>
    
      <category term="Month" scheme="http://yoursite.com/categories/Life/Year/Month/"/>
    
      <category term="Day" scheme="http://yoursite.com/categories/Life/Year/Month/Day/"/>
    
    
      <category term="Life" scheme="http://yoursite.com/tags/Life/"/>
    
  </entry>
  
</feed>
